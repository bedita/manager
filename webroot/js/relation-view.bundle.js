(window.webpackJsonp=window.webpackJsonp||[]).push([["relation-view"],{"./src/Template/Layout/js/app/components/relation-view/relation-view.js":function(e,t,i){"use strict";i.r(t);var a=i("./node_modules/sleep-promise/build/esm.mjs"),n=i("./node_modules/flatpickr/dist/flatpickr.js"),o=i.n(n),r=i("./src/Template/Layout/js/app/mixins/paginated-content.js");const l={data:()=>({relationData:null,relationSchema:null,relationTypes:null}),methods:{getRelationData(){let e=window.location.href;if(this.relationName){let t=`${e}/relationData/${this.relationName}`;const i={credentials:"same-origin",headers:{accept:"application/json"}};return this.relationData?Promise.resolve(this.relationData):fetch(t,i).then(e=>e.json()).then(e=>{if(e.data&&e.data.attributes)return this.relationData=e.data.attributes,this.relationSchema=this.getRelationSchema(),this.relationTypes={left:e.data.left,right:e.data.right},this.relationData}).catch(e=>{console.error(e)})}return console.error("[RelationSchemaMixin] relationName not defined - can't load relation schema"),Promise.reject()},relationHasParams(){return null!==this.relationData&&!!this.getRelationSchema()},getRelationSchema(){return null===this.relationSchema&&(this.relationSchema=null!==this.relationData&&this.relationData.params&&this.relationData.params.properties),this.relationSchema},getParamHelper:(e,t)=>e.meta.relation.params&&e.meta.relation.params[t]||null}};var d=i("./src/Template/Layout/js/app/components/panel-view.js");t.default={mixins:[r.c,l],components:{RelationshipsView:()=>i.e("relationships-view").then(i.bind(null,"./src/Template/Layout/js/app/components/relation-view/relationships-view/relationships-view.js")),RolesListView:()=>i.e("roles-list-view").then(i.bind(null,"./src/Template/Layout/js/app/components/relation-view/roles-list-view.js")),FilterBoxView:()=>i.e("filter-box-view").then(i.bind(null,"./src/Template/Layout/js/app/components/filter-box.js")),TreeView:()=>i.e("tree-view").then(i.bind(null,"./src/Template/Layout/js/app/components/tree-view/tree-view.js"))},props:{relationName:{type:String,required:!0},loadOnStart:[Boolean,Number],multipleChoice:{type:Boolean,default:!0},configPaginateSizes:{type:String,default:"[]"}},data:()=>({method:"relatedJson",loading:!1,count:0,requesterId:null,removedRelated:[],addedRelations:[],modifiedRelations:[],removedRelationsData:[],addedRelationsData:[],relationsData:[],activeFilter:{}}),computed:{alreadyInView(){let e=this.addedRelations.map(e=>e.id),t=this.objects.map(e=>e.id);return e.concat(t)}},created(){this.endpoint=`${this.method}/${this.relationName}`},mounted(){this.loadOnMounted(),d.a.listen("edit-params:save",this,this.editParamsSave),d.a.listen("relations-add:save",this,this.appendRelations),d.a.listen("panel:closed",null,this.resetPanelRequester)},beforeDestroy(){d.a.stop("edit-params:save",this,this.editParamsSave),d.a.stop("relations-add:save",this,this.appendRelations),d.a.stop("panel:closed",null,this.resetPanelRequester)},watch:{loading(e){this.$emit("loading",e)}},methods:{onFilterObjects(e){this.activeFilter=e,this.toPage(1,this.activeFilter)},onUpdatePageSize(e){this.setPageSize(e),this.loadRelatedObjects(this.activeFilter)},onUpdateCurrentPage(e){this.toPage(e,this.activeFilter)},editParamsSave(e){this.updateRelationParams(e),this.closePanel()},isPanelOpen(e=null){return null===e?!!this.requesterId:this.requesterId===e},updateRelationParams(e){const t=e.id,i=this.objects.filter(e=>{if(e.id===t)return e}).pop();this.modifyRelation(i)},appendRelations(e){if(this.addedRelations.length){let t=this.addedRelations.map(e=>e.id);for(let i=0;i<e.length;i++)t.indexOf(e[i].id)<0&&this.addedRelations.push(e[i])}else this.addedRelations=e;this.prepareRelationsToSave(),this.closePanel()},editRelationParams(e){this.requesterId=e.related.id,d.a.requestPanel({action:"edit-relation-params",from:this,data:e})},resetPanelRequester(){this.requesterId=null},addRelatedObjects(e){this.requesterId=e.object.id,d.a.requestPanel({action:"relations-add",from:this,data:e})},closePanel(){d.a.closePanel()},async loadOnMounted(){if(this.loadOnStart){const e="number"==typeof this.loadOnStart?this.loadOnStart:0;await Object(a.a)(e),null===this.relationSchema&&await this.getRelationData(),await this.loadRelatedObjects()}},async loadRelatedObjects(e={},t=!1){return this.loading=!0,this.getPaginatedObjects(!0,e).then(e=>(this.$emit("count",this.pagination.count),this.loading=!1,e)).catch(e=>{20!==e.code&&(this.loading=!1,console.error(e),s)})},reloadObjects(){return this.activeFilter={},this.loadRelatedObjects({},!0)},relationToggle(e){e&&e.id?this.containsId(this.removedRelated,e.id)?this.restoreRemovedRelation(e):this.removeRelation(e):console.error("[relationToggle] needs first param (related) as {object} with property id set")},removeRelation(e){this.removedRelated.push(e),this.prepareRelationsToRemove(this.removedRelated),this.containsId(this.modifiedRelations,e.id)&&this.prepareRelationsToSave()},restoreRemovedRelation(e){let t=this.removedRelated.findIndex(t=>t.id!==e.id);this.removedRelated.splice(t,1),this.prepareRelationsToRemove(this.removedRelated),this.containsId(this.modifiedRelations,e.id)&&this.prepareRelationsToSave()},prepareRelationsToRemove(e){this.removedRelationsData=JSON.stringify(this.formatObjects(e));const t=!!e.length;this.$el.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:{id:this.$vnode.tag,isChanged:t}}))},setRemovedRelated(e){e&&(this.removedRelated=e,this.prepareRelationsToRemove(this.removedRelated))},removeAddedRelations(e){e?(this.addedRelations=this.addedRelations.filter(t=>t.id!==e),this.prepareRelationsToSave()):console.error("[removeAddedRelations] needs first param (id) as {Number|String}")},modifyRelation(e){this.containsId(this.modifiedRelations,e.id)?this.modifiedRelations=this.modifiedRelations.map(t=>t.id===e.id?e:t):this.modifiedRelations.push(e),this.prepareRelationsToSave()},removeModifiedRelations(e){e?(this.modifiedRelations=this.modifiedRelations.filter(t=>t.id!==e),this.prepareRelationsToSave()):console.error("[removeModifiedRelations] needs first param (id) as {Number|String}")},prepareRelationsToSave(){let e=this.addedRelations.concat(this.modifiedRelations).filter(e=>!this.containsId(this.removedRelated,e.id));this.addedRelationsData=JSON.stringify(this.formatObjects(e));const t=!!e.length;this.$el.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:{id:this.$vnode.tag,isChanged:t}}))},formatParam(e,t){const i=this.getRelationSchema();return void 0!==i&&"date-time"===i[e].format?o.a.formatDate(new Date(t),"Y-m-d h:i K"):t},toPage(e,t){this.loading=!0,r.c.methods.toPage.call(this,e,t).then(e=>(this.loading=!1,e)).catch(e=>{20!==e.code&&(this.loading=!1,console.error(e))})},containsId:(e,t)=>e.filter(e=>e.id===t).length,buildViewUrl:(e,t)=>`${window.location.protocol}//${window.location.host}/${e}/view/${t}`}}},"./src/Template/Layout/js/app/mixins/paginated-content.js":function(e,t,i){"use strict";i.d(t,"b",function(){return a}),i.d(t,"a",function(){return s}),i.d(t,"c",function(){return n});const a={count:0,page:1,page_size:20,page_count:1},s={q:"",filter:{type:""}},n={data:()=>({requestsQueue:[],requestController:new AbortController,objects:[],endpoint:null,pagination:a,query:{},formatObjetsFilter:["params","priority","position","url"]}),methods:{getPaginatedObjects(e=!0,t={}){let i=window.location.href;if(this.endpoint){t&&(this.query=t);let a=`${i}/${this.endpoint}`;const s={credentials:"same-origin",headers:{accept:"application/json"}};a=this.getUrlWithPaginationAndQuery(a),this.requestsQueue.length>0&&(this.requestController.abort(),this.requestController=new AbortController),s.signal=this.requestController.signal;let n=fetch(a,s).then(e=>e.json()).then(t=>{this.requestsQueue.pop();let i=(Array.isArray(t.data)?t.data:[t.data])||[];return t.data||(i=[]),this.requestsQueue.length<1&&(e&&(this.objects=i),this.pagination=t.meta&&t.meta.pagination||this.pagination,i)}).catch(e=>{if(this.requestsQueue.pop(),20===e.code)throw e;console.error(e)});return this.requestsQueue.push(n),n}return Promise.reject()},formatObjects(e){if(void 0===e)return[];const t=[];return e.forEach(e=>{let i={};i.id=e.id,i.type=e.type;const a=e.meta.relation;if(a){let e={};this.formatObjetsFilter.forEach(t=>{a[t]&&(e[t]=a[t])}),Object.keys(e).length&&(i.meta={relation:e})}t.push(i)}),t},setPagination(e){let t="",i="?";return Object.keys(this.pagination).forEach((e,i)=>{t+=`${i?"&":""}${e}=${this.pagination[e]}`}),-1===e.indexOf(i)||(i="&"),`${e}${i}${t}`},getUrlWithPaginationAndQuery(e){let t="",i="?";return Object.keys(this.pagination).forEach((e,i)=>{t+=`${i?"&":""}${e}=${this.pagination[e]}`}),t.length>1&&(t+="&"),Object.keys(this.query).forEach((e,i)=>{const a=this.query[e];let s=`${e}=${a}`;if("filter"===e){let e="";Object.keys(a).forEach(t=>{""!==a[t]&&(e+=`filter[${t}]=${a[t]}`)}),s=e}t+=`${i?"&":""}${s}`}),-1===e.indexOf(i)||(i="&"),`${e}${i}${t}`},findObjectById(e){let t=this.objects.filter(t=>t.id===e);return t.length&&t[0]},async loadMore(e=a.page_size){if(this.pagination.page_items<this.pagination.count){let t=await this.nextPage(!1);this.pagination.page_items=this.pagination.page_items+e<=this.pagination.count?this.pagination.page_items+e:this.pagination.count;const i=this.objects.length;this.objects.splice(i,0,...t)}},toPage(e,t={}){return this.pagination.page=e||1,this.getPaginatedObjects(!0,t)},firstPage(e=!0){return 1!==this.pagination.page?(this.pagination.page=1,this.getPaginatedObjects(e)):Promise.resolve([])},lastPage(e=!0){return this.pagination.page!==this.pagination.page_count?(this.pagination.page=this.pagination.page_count,this.getPaginatedObjects(e)):Promise.resolve([])},nextPage(e=!0){return this.pagination.page<this.pagination.page_count?(this.pagination.page=this.pagination.page+1,this.getPaginatedObjects(e)):Promise.resolve([])},prevPage(){return this.pagination.page>1?(this.pagination.page=this.pagination.page-1,this.getPaginatedObjects()):Promise.resolve()},setPageSize(e){this.pagination.page_size=e,this.pagination.page=1}}}}}]);