{"version":3,"sources":["sourcemap/./src/Template/Layout/js/app/app.js","sourcemap/./src/Template/Layout/js/app/components/property-view/property-view.js","sourcemap/./src/Template/Layout/js/app/components/relation-view/relation-view.js","sourcemap/./src/Template/Layout/js/app/components/relation-view/relations-add.js","sourcemap/./src/Template/Layout/js/app/components/relation-view/relationships-view/relationships-view.js","sourcemap/./src/Template/Layout/js/app/components/staggered-list.js","sourcemap/./src/Template/Layout/js/app/components/tree-view/tree-list/tree-list.js","sourcemap/./src/Template/Layout/js/app/components/tree-view/tree-view.js","sourcemap/./src/Template/Layout/js/app/directives/datepicker.js","sourcemap/./src/Template/Layout/js/app/directives/jsoneditor.js","sourcemap/./src/Template/Layout/js/app/directives/richeditor.js","sourcemap/./src/Template/Layout/js/app/mixins/paginated-content.js","sourcemap/./src/Template/Layout/js/app/pages/modules/index.js","sourcemap/./src/Template/Layout/js/app/pages/modules/view.js","sourcemap/./src/Template/Layout/js/config/config.js","webpack:///./src/Template/Layout/style.scss?e660"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,2DAA2D,EAAE;AAC7D;AACA,SAAS;;;AAGT;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA,yBAAyB,uBAAuB,EAAE,yBAAyB;AAC3E;;AAEA;AACA;AACA,8BAA8B,kBAAkB,EAAE,IAAI,GAAG,YAAY;AACrE;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;;AAGT;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;;;;;;;;;;;;;;ACvNA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB,UAAU,OAAO;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;AC9DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEoD;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,2BAA2B,YAAY,GAAG,kBAAkB;AAC5D,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB;AACnB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,gFAAgF,OAAO;AACvF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,iFAAiF,cAAc;AAC/F;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,mBAAmB,OAAO;AAC1B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,sBAAsB,yBAAyB,IAAI,qBAAqB,GAAG,WAAW,QAAQ,SAAS;AACvG,SAAS;;;AAGT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;;;;;;;;;;;;;;;AChSA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY,GAAG,OAAO;AAC7D;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;;;;;;;;;;;;;;AC9EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgC;AAChC;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,2BAA2B,YAAY,GAAG,kBAAkB;AAC5D,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,mBAAmB,OAAO;AAC1B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;;;;;;;;;;;;AC7NA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA,mCAAmC,KAAK;AACxC,gCAAgC,KAAK;AACrC;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C,2CAA2C,KAAK;AAChD,2CAA2C,KAAK;AAChD,iBAAiB;;AAEjB;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA,uCAAuC,KAAK;AAC5C,uCAAuC,KAAK;AAC5C,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,MAAM;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,2BAA2B;AAC1E;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzTA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,UAAU,QAAQ;AAClB,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA,wBAAwB;AACxB;AACA,KAAK;;AAEL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA,gFAAgF,OAAO;AACvF;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AC1QA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,qBAAqB;;AAErB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;ACvDA;AAAA;AACA;AACA;AACA;AACA;;AAEyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;AC3BA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;AACA,oCAAoC,QAAQ,GAAG,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,uBAAuB,EAAE,IAAI,GAAG,qBAAqB;AACtF,aAAa;;AAEb;AACA;AACA;AACA;AACA,sBAAsB,IAAI,EAAE,GAAG,EAAE,WAAW;AAC5C,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AChNA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5IA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC3CA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,0DAA0D,GAAG,MAAM;AACnE;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,2DAA2D;AACxE,aAAa,iKAAiK;AAC9K,aAAa,wLAAwL;AACrM,aAAa,uDAAuD;AACpE,aAAa,4CAA4C;AACzD,aAAa,mEAAmE;AAChF,aAAa,0FAA0F;AACvG,aAAa,wDAAwD;AACrE,aAAa,gDAAgD;AAC7D,aAAa,2IAA2I;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,aAAa,2DAA2D;AACxE,aAAa,qIAAqI;AAClJ,aAAa,4CAA4C;AACzD,aAAa,mHAAmH;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,aAAa,2DAA2D;AACxE,aAAa,iKAAiK;AAC9K,aAAa,4CAA4C;AACzD,aAAa,gFAAgF;AAC7F,aAAa,yCAAyC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;ACrEA,yC","file":"js/app.bundle.js","sourcesContent":["import Vue from 'vue/dist/vue.min.js';\n\nimport 'Template/Layout/style.scss';\n\nimport ModulesIndex from 'app/pages/modules/index';\nimport ModulesView from 'app/pages/modules/view';\nimport TrashIndex from 'app/pages/modules/index';\nimport TrashView from 'app/pages/modules/view';\nimport RelationsAdd from 'app/components/relation-view/relations-add';\n\nimport datepicker from 'app/directives/datepicker';\nimport jsoneditor from 'app/directives/jsoneditor';\nimport richeditor from 'app/directives/richeditor';\nimport VueHotkey from 'v-hotkey';\n\nVue.use(jsoneditor);\nVue.use(datepicker);\nVue.use(richeditor);\nVue.use(VueHotkey);\n\nimport { VueConfig, VueOptions } from 'config/config';\n\n// merge vue options, config from configuration file\nfor (let property in VueConfig) {\n    if (VueConfig.hasOwnProperty(property)) {\n        Vue.config[property] = VueConfig[property];\n    }\n}\n\nfor (let property in VueOptions) {\n    if (VueOptions.hasOwnProperty(property)) {\n        Vue.options[property] = VueOptions[property];\n    }\n}\n\nconst _vueInstance = new Vue({\n    el: 'main',\n\n    components: {\n        ModulesIndex,\n        ModulesView,\n        TrashIndex,\n        TrashView,\n        RelationsAdd,\n    },\n\n    data() {\n        return {\n            vueLoaded: false,\n            urlPagination: '',\n            searchQuery: '',\n            pageSize: '100',\n            page: '',\n            sort: '',\n            panelIsOpen: false,\n            addRelation: {},\n        }\n    },\n\n    created() {\n        this.vueLoaded = true;\n\n        // load url params when component initialized\n        this.loadUrlParams();\n    },\n\n    methods: {\n        // panel\n        onRequestPanelToggle(evt) {\n            this.panelIsOpen = !this.panelIsOpen;\n            var cl = document.querySelector('html').classList;\n            cl.contains('is-clipped')? cl.remove('is-clipped') : cl.add('is-clipped');\n\n            // return data from panel\n            if(evt.returnData) {\n                if(evt.returnData.relationName){\n                    this.$refs[\"moduleView\"]\n                        .$refs[evt.returnData.relationName]\n                        .$refs[\"relation\"].appendRelations(evt.returnData.objects);\n                }\n            }\n\n            // open panel for relations add\n            if(this.panelIsOpen && evt.relation && evt.relation.name) {\n                this.addRelation = evt.relation;\n            } else {\n                sleep(500).then(() => this.addRelation = {}); // 500ms is the panel transition duration\n            }\n        },\n\n\n        /**\n         * extract params from page url\n         *\n         * @returns {void}\n         */\n        loadUrlParams() {\n            // look for query string params in window url\n            if (window.location.search) {\n                const urlParams = window.location.search;\n\n                // search for q='some string' both after ? and & tokens\n                const queryStringExp = /[?&]q=([^&#]*)/g;\n                let matches = urlParams.match(queryStringExp);\n                if (matches && matches.length) {\n                    matches = matches.map(e => e.replace(queryStringExp, '$1'));\n                    this.searchQuery = matches[0];\n                }\n\n                // search for page_size='some string' both after ? and & tokens\n                const pageSizeExp = /[?&]page_size=([^&#]*)/g;\n                matches = urlParams.match(pageSizeExp);\n                if (matches && matches.length) {\n                    matches = matches.map(e => e.replace(pageSizeExp, '$1'));\n                    this.pageSize = this.isNumeric(matches[0]) ? matches[0] : '';\n                }\n\n                // search for page='some string' both after ? and & tokens\n                const pageExp = /[?&]page=([^&#]*)/g;\n                matches = urlParams.match(pageExp);\n                if (matches && matches.length) {\n                    matches = matches.map(e => e.replace(pageExp, '$1'));\n                    this.page = this.isNumeric(matches[0]) ? matches[0] : '';\n                }\n\n                // search for sort='some string' both after ? and & tokens\n                const sortExp = /[?&]sort=([^&#]*)/g;\n                matches = urlParams.match(sortExp);\n                if (matches && matches.length) {\n                    matches = matches.map(e => e.replace(sortExp, '$1'));\n                    this.sort = matches[0];\n                }\n            }\n        },\n\n        /**\n         * build coherent url based on these params:\n         * - q= query string\n         * - page_size\n         *\n         * @param {Object} params\n         * @returns {String} url\n         */\n        buildUrlParams(params) {\n            let url = `${window.location.origin}${window.location.pathname}`;\n            let first = true;\n\n            Object.keys(params).forEach((key) =>  {\n                if (params[key] && params[key] !== '') {\n                    url += `${first ? '?' : '&'}${key}=${params[key]}`;\n                    first = false;\n                }\n            });\n\n            return url;\n        },\n\n\n        /**\n         * update pagination keeping searched string\n         *\n         * @returns {void}\n         */\n        updatePagination() {\n            window.location.replace(this.urlPagination);\n        },\n\n        /**\n         * search queryString keeping pagination options\n         *\n         * @returns {void}\n         */\n        search() {\n            this.page = '';\n            this.applyFilters();\n        },\n\n\n        /**\n         * reset queryString in search keeping pagination options\n         *\n         * @returns {void}\n         */\n        resetResearch() {\n            this.searchQuery = '';\n            this.applyFilters();\n        },\n\n        /**\n         * apply page filters such as query string or pagination\n         *\n         * @returns {void}\n         */\n        applyFilters() {\n            let url = this.buildUrlParams({\n                q: this.searchQuery,\n                page_size: this.pageSize,\n                page: this.page,\n                sort: this.sort,\n            });\n            window.location.replace(url);\n        },\n\n        /**\n         * Helper function\n         *\n         * @param {String|Number} num\n         * @returns {Boolean}\n         */\n        isNumeric(num) {\n            return !isNaN(num);\n        },\n    }\n});\n\nwindow._vueInstance = _vueInstance;\n","/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Elements/Form/other_properties.twig\n *  Template/Elements/Form/core_properties.twig\n *  Template/Elements/Form/meta.twig\n *\n * <property-view> component used for ModulesPage -> View\n *\n * Component that wraps group of properties in the object View\n *\n * @prop {Boolean} tabOpen determines whether the property content is visible or not\n * @prop {String} label label of the property view\n *\n */\n\nimport RelationView from 'app/components/relation-view/relation-view';\n\nexport default {\n    components: {\n        RelationView,\n    },\n\n    props: {\n        tabOpen: {\n            type: Boolean,\n            default: true,\n        },\n        isDefaultOpen: {\n            type: Boolean,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            isOpen: true,\n            isLoading: false,\n            count: 0,\n        }\n    },\n\n    mounted() {\n        this.isOpen = this.isDefaultOpen;\n    },\n\n    watch: {\n        tabOpen() {\n            this.isOpen = this.tabOpen;\n        },\n    },\n\n    methods: {\n        toggleVisibility() {\n            this.isOpen = !this.isOpen;\n        },\n        onToggleLoading(status) {\n            this.isLoading = status;\n        },\n        onCount(n) {\n            this.count = n;\n        },\n    }\n}\n","/**\n *  Templates that uses this component (directly or indirectly):\n *  Template/Elements/relations.twig\n *  Template/Elements/trees.twig\n *  Template/Elements/trees.twig\n *\n * <relation-view> component used for ModulesPage -> View\n *\n * @prop {String} relationName name of the relation used by the PaginatiedContentMixin\n * @prop {Boolean} loadOnStart load content on component init\n *\n */\n\nimport StaggeredList from 'app/components/staggered-list';\nimport RelationshipsView from 'app/components/relation-view/relationships-view/relationships-view';\nimport TreeView from 'app/components/tree-view/tree-view';\nimport sleep from 'sleep-promise';\n\nimport { PaginatedContentMixin, DEFAULT_PAGINATION } from 'app/mixins/paginated-content';\n\nexport default {\n    mixins: [ PaginatedContentMixin ],\n    components: {\n        StaggeredList,\n        RelationshipsView,\n        TreeView,\n    },\n\n    props: {\n        relationName: {\n            type: String,\n            required: true,\n        },\n        loadOnStart: [Boolean, Number],\n        multipleChoice: {\n            type: Boolean,\n            default: true,\n        },\n        configPaginateSizes: {\n            type: String,\n            default: '[]',\n        },\n    },\n\n    data() {\n        return {\n            method: 'relatedJson',          // define AppController method to be used\n            loading: false,\n            count: 0,                       // count number of related objects, on change triggers an event\n\n            removedRelated: [],             // currently related objects to be removed\n            addedRelations: [],             // staged added objects to be saved\n            relationsData: [],              // hidden field containing serialized json passed on form submit\n            newRelationsData: [],           // array of serialized new relations\n\n            pageSize: DEFAULT_PAGINATION.page_size,     // pageSize value for pagination page size\n        }\n    },\n\n    computed: {\n        // array of ids of objects in view\n        alreadyInView() {\n            var a = this.addedRelations.map(o => o.id);\n            var b = this.objects.map(o => o.id);\n            return a.concat(b);\n        },\n        paginateSizes() {\n            return JSON.parse(this.configPaginateSizes);\n        }\n    },\n\n    /**\n     * setup correct endpoint for PaginatedContentMixin.getPaginatedObjects()\n     *\n     * @return {void}\n     */\n    created() {\n        this.endpoint = `${this.method}/${this.relationName}`;\n    },\n\n    /**\n     * load content if flag set to true after component is mounted\n     *\n     * @return {void}\n     */\n    mounted() {\n        this.loadOnMounted();\n    },\n\n    watch: {\n        /**\n         * watcher for pageSize variable, change pageSize and reload relations\n         *\n         * @param {Number} value\n         */\n        pageSize(value) {\n            this.setPageSize(value);\n            this.loadRelatedObjects();\n        },\n\n        loading(value) {\n            this.$emit('loading', value);\n        },\n    },\n\n    methods: {\n        async loadOnMounted() {\n            if (this.loadOnStart) {\n                var t = (typeof this.loadOnStart === 'number')? this.loadOnStart : 0;\n                await sleep(t);\n                await this.loadRelatedObjects();\n            }\n        },\n\n        /**\n         * call PaginatedContentMixin.getPaginatedObjects() method and handle loading\n         *\n         * @return {Boolean} response;\n         */\n        async loadRelatedObjects() {\n            this.loading = true;\n\n            let resp = await this.getPaginatedObjects();\n            this.loading = false;\n            this.$emit('count', this.pagination.count);\n            return resp;\n        },\n\n\n        /**\n         * toggle relation\n         *\n         * @param {object}\n         *\n         * @returns {void}\n         */\n        relationToggle(related) {\n            if (!related || !related.id) {\n                console.error('[reAddRelations] needs first param (related) as {object} with property id set');\n                return;\n            }\n            if (!this.containsId(this.removedRelated, related.id)) {\n                this.removeRelation(related);\n            } else {\n                this.undoRemoveRelation(related);\n            }\n        },\n\n\n        /**\n         * remove related object: adding it to removedRelated Array\n         *\n         * @param {String} type\n         *\n         * @returns {void}\n         */\n        removeRelation(related) {\n            this.removedRelated.push(related);\n            this.relationsData = JSON.stringify(this.removedRelated);\n        },\n\n        /**\n         * re-add removed related object: removing it from removedRelated Array\n         *\n         * @param {Number} id\n         * @param {String} type\n         *\n         * @returns {void}\n         */\n        undoRemoveRelation(related) {\n            this.removedRelated = this.removedRelated.filter((rel) => rel.id !== related.id);\n            this.relationsData = JSON.stringify(this.removedRelated);\n        },\n\n\n        /**\n         * prepare removeRelated Array for saving using serialized json input field\n         *\n         * @param {Array} relations\n         *\n         * @returns {void}\n         */\n        setRemovedRelated(relations) {\n            if (!relations ) {\n                return;\n            }\n            this.removedRelated = relations;\n            this.relationsData = JSON.stringify(this.removedRelated);\n        },\n\n\n        /**\n         * go to specific page\n         *\n         * @param {Number} page number\n         *\n         * @return {Promise} repsonse from server with new data\n         */\n        async toPage(i) {\n            this.loading = true;\n            let resp =  await PaginatedContentMixin.methods.toPage.call(this, i);\n            this.loading = false;\n            return resp;\n        },\n\n\n        /**\n         * remove element with matched id from staged relations\n         *\n         * @param {Number} id\n         */\n        removeAddedRelations(id) {\n            if (!id) {\n                console.error('[removeAddedRelations] needs first param (id) as {Number|String}');\n                return;\n            }\n            this.addedRelations = this.addedRelations.filter((rel) => rel.id !== id);\n        },\n\n\n        /**\n         * Event 'added-relations' callback\n         * retrieve last added relations from relationships-view\n         *\n         * @param {Array} relations\n         *\n         * @return {void}\n         */\n        appendRelations(items) {\n            if (!this.addedRelations.length) {\n                this.addedRelations = items;\n            } else {\n                var existingIds = this.addedRelations.map(a => a.id);\n                for (var i = 0; i < items.length; i++) {\n                    if (existingIds.indexOf(items[i].id) < 0) {\n                        this.addedRelations.push(items[i]);\n                    }\n                }\n            }\n            this.newRelationsData = JSON.stringify(this.addedRelations);\n        },\n\n\n        /**\n         * helper function: check if array relations has element with id -> id\n         *\n         * @param {Array} relations\n         * @param {Number} id\n         *\n         * @return {Boolean} true if id is in Array relations\n         */\n        containsId(relations, id) {\n            return relations.filter((rel) => rel.id === id).length;\n        },\n\n\n        /**\n         * helper function: build open view url\n         *\n         * @param {String} objectType\n         * @param {Number} objectId\n         *\n         * @return {String} url\n         */\n        buildViewUrl(objectType, objectId) {\n            return `${window.location.protocol}//${window.location.host}/${objectType}/view/${objectId}`;\n        },\n\n\n        /**\n         * request panel emitting event in module view\n         *\n         * @param {String} objectType\n         * @param {Number} objectId\n         *\n         * @return {String} url\n         */\n        requestPanel() {\n            // emit event in module view\n            this.$parent.$parent.$emit('request-panel', {\n                relation: {\n                    name: this.relationName,\n                    alreadyInView: this.alreadyInView,\n                },\n            });\n        }\n    }\n\n}\n","/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Elements/relations.twig\n *\n * <relations-add> component used for Panel\n *\n */\n\nimport { PaginatedContentMixin } from 'app/mixins/paginated-content';\nimport decamelize from 'decamelize';\n\nexport default {\n    mixins: [ PaginatedContentMixin ],\n    props: {\n        relationName: {\n            type: String,\n            default: '',\n        },\n        alreadyInView: {\n            type: Array,\n            default: () => [],\n        },\n    },\n    data() {\n        return {\n            method: 'relationshipsJson',\n            endpoint: '',\n            selectedObjects: [],\n        }\n    },\n\n    computed: {\n        relationHumanizedName() {\n            return decamelize(this.relationName);\n        }\n    },\n\n    watch: {\n        relationName: {\n            immediate: true,\n            handler(newVal, oldVal) {\n                if(newVal) {\n                    this.selectedObjects = [];\n                    this.endpoint = `${this.method}/${newVal}`;\n                    this.loadObjects();\n                }\n            },\n        }\n    },\n\n    methods: {\n        returnData() {\n            var data = {\n                objects: this.selectedObjects,\n                relationName: this.relationName,\n            };\n            this.$root.onRequestPanelToggle({ returnData: data });\n        },\n        toggle(object, evt) {\n            let position = this.selectedObjects.indexOf(object);\n            if(position != -1) {\n                this.selectedObjects.splice(position, 1);\n            } else {\n                this.selectedObjects.push(object);\n            }\n        },\n        isAlreadyRelated() {\n            return true;\n        },\n        // form mixin\n        async loadObjects() {\n            this.loading = true;\n            let resp = await this.getPaginatedObjects();\n            this.loading = false;\n            return resp;\n        },\n    }\n\n}\n","/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Elements/relations.twig\n *\n * <relationships-view> component used for ModulesPage -> View\n *\n */\n\nimport { PaginatedContentMixin } from 'app/mixins/paginated-content';\nimport StaggeredList from 'app/components/staggered-list';\n\nexport default {\n    mixins: [ PaginatedContentMixin ],\n    components: {\n        StaggeredList,\n    },\n\n    // props used by parent\n    props: {\n        relationName: {\n            type: String,\n            required: true,\n        },\n        viewVisibility: {\n            type: Boolean,\n            default: () => false,\n        },\n        addedRelations: {\n            type: Array,\n            default: () => [],\n        },\n        // relations already related to the object\n        hideRelations: {\n            type: Array,\n            default: () => [],\n        }\n    },\n\n    computed: {\n        keyEvents() {\n            return {\n                'esc': {\n                    keyup: this.handleKeyboard,\n                }\n            };\n        },\n    },\n\n    data() {\n        return {\n            method: 'relationshipsJson',    // define AppController method to be used\n            loading: false,\n            pendingRelations: [],           // pending elements to be added\n            relationsData: [],              // hidden field containing serialized json passed on form submit\n            isVisible: false,\n        }\n    },\n\n    /**\n     * setup correct endpoint for PaginatedContentMixin.getPaginatedObjects()\n     *\n     * @return {void}\n     */\n    created() {\n        this.endpoint = `${this.method}/${this.relationName}`;\n    },\n\n    watch: {\n        /**\n         * watch elements staged from relation-view (view can delete last added elements before saving)\n         *\n         * @param {Array} relations\n         *\n         * @return {void}\n         */\n        addedRelations(relations) {\n            this.pendingRelations = relations;\n        },\n\n        /**\n         * watch pendingRelations Array and prepare it for saving using serialized json input field\n         *\n         * @param {Array} relations\n         *\n         * @return {void}\n         */\n        pendingRelations(relations) {\n            this.relationsData = this.relationFormatterHelper(relations);\n        },\n\n        /**\n         * set isVisible value from property's viewVisibility change\n         *\n         * @param {Boolean} value\n         *\n         * @return {void}\n         */\n        viewVisibility(value) {\n            this.isVisible = value;\n        },\n\n        /**\n         * emit event to parent\n         * load data when empty\n         * @event 'visibility-setter'\n         *\n         * @return {void}\n         */\n        isVisible() {\n            if (!this.objects.length) {\n                this.loadObjects();\n            }\n            // avoid problem with vue rendering queue\n            this.$nextTick( () => {\n                if (this.isVisible && this.$refs.inputFilter) {\n                    this.$refs.inputFilter.focus();\n                }\n            });\n\n            // emit event to pass data to parent\n            this.$emit('visibility-setter', this.isVisible);\n        },\n\n        loading(value) {\n            this.$parent.$emit('loading', value);\n        }\n    },\n\n    methods: {\n        /**\n         * load objects using PaginatedContentMixin.getPaginatedObjects()\n         *\n         * @return {Promise} resp\n         */\n        async loadObjects() {\n            this.loading = true;\n\n            let resp = await this.getPaginatedObjects();\n            this.loading = false;\n\n            return resp;\n        },\n\n        /**\n         * send addedRelations to parent view\n         *\n         * @return {void}\n         */\n        appendRelations() {\n            this.$emit('append-relations', this.pendingRelations);\n\n            this.isVisible = false;\n        },\n\n        /**\n         * handles ESC keyboard up event to hide current view\n         *\n         * @param {Event} event\n         */\n        handleKeyboard(event) {\n            if (this.isVisible) {\n                event.stopImmediatePropagation();\n                event.preventDefault();\n                this.hideRelationshipModal()\n            }\n        },\n\n        /**\n         * set component view's visibility to false\n         * reset pendingRelations\n         *\n         * @return {void}\n         */\n        hideRelationshipModal() {\n            this.pendingRelations = this.addedRelations;\n            this.isVisible = false;\n        },\n\n        /**\n         * helper function for template\n         *\n         * @return {Boolean} true if has at least a related object or a newly added object\n         */\n        hasElementsToShow() {\n            const visible = this.objects.filter((obj) => {\n                return !this.hideRelations.filter( (hidden) => obj.id === hidden.id).length;\n            });\n            return visible.length;\n        },\n\n        /**\n         * helper function: convert array to string\n         *\n         * @param {Array} relations\n         *\n         * @return {String} string version of relations\n         */\n        relationFormatterHelper(relations, objectType) {\n            let jsonString = '';\n            try {\n                jsonString = JSON.stringify(relations);\n            } catch(err) {\n                console.error(err);\n            }\n            return jsonString;\n        },\n\n        /**\n         * helper function: check if array relations has element with id -> id\n         *\n         * @param {Array} relations\n         * @param {Number} id\n         *\n         * @return {Boolean} true if id is in Array relations\n         */\n        containsId(relations, id) {\n            return relations.filter((rel) => rel.id === id).length;\n        },\n\n    }\n\n}\n","/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Elements/relations.twig\n *\n * <staggered-list> component used for lists with staggered animation\n *\n */\n\nconst NAME = 'staggered';\n\nexport default {\n    template: `\n        <transition-group appear\n            name=\"${NAME}\"\n            v-on:enter=\"enter\"\n            v-on:after-enter=\"afterEnter\">\n            <slot></slot>\n        </transition-group>`,\n\n    props: {\n        stagger: {\n            type: String,\n            default: () => 50,\n        },\n    },\n\n    methods: {\n        enter(el, done) {\n            el.classList.remove(`${NAME}-enter-to`);\n            el.classList.add(`${NAME}-enter`);\n            const delay = this.getDelay(el);\n            setTimeout(() => {\n                this.$nextTick(() => {\n                    el.classList.add(`${NAME}-enter`);\n                    el.classList.remove(`${NAME}-enter-to`);\n                    el.classList.remove(`${NAME}-enter-active`);\n                });\n\n                done();\n            }, delay);\n        },\n\n        afterEnter(el) {\n            this.$nextTick(() => {\n                el.classList.remove(`${NAME}-enter`);\n                el.classList.remove(`${NAME}-enter-to`);\n            });\n        },\n\n        getDelay(el) {\n            return el.dataset && el.dataset.index * this.stagger + 5;\n        }\n    }\n}\n","/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Elements/trees.twig\n *\n * <tree-list> component used for ModulesPage -> View\n *\n * modes:\n * - single-choice tree\n * - multiple-choice tree\n *\n * @prop {Boolean} multipleChoice (default true)\n * @prop {String} captionField specify which field of the object is to be used a caption\n * @prop {String} childrenField specify which field of the object is to be used a children\n * @prop {Object} item object of this node\n * @prop {Array} relatedObjects list of already related Objects\n *\n */\n\nexport default {\n    name: 'tree-list',\n\n    template: `\n        <div\n            class=\"tree-list-node\"\n            :class=\"treeListMode\">\n\n            <div v-if=\"!isRoot\">\n                <div v-if=\"multipleChoice\"\n                    class=\"node-element\"\n                    :class=\"{\n                        'tree-related-object': isRelated,\n                        'disabled': isCurrentObjectInPath,\n                        'node-folder': isFolder,\n                    }\">\n\n                    <span\n                        @click.prevent.stop=\"toggle\"\n                        class=\"icon\"\n                        :class=\"nodeIcon\"\n                        ></span>\n                    <input\n                        type=\"checkbox\"\n                        :value=\"item\"\n                        v-model=\"related\"\n                    />\n                    <label\n                        @click.prevent.stop=\"toggle\"\n                        :class=\"isFolder ? 'is-folder' : ''\"><: caption :></label>\n                </div>\n                <div v-else class=\"node-element\"\n                    :class=\"{\n                        'tree-related-object': isRelated || stageRelated,\n                        'was-related-object': isRelated && !stageRelated,\n                        'disabled': isCurrentObjectInPath\n                    }\"\n\n                    @click.prevent.stop=\"select\">\n                    <span\n                        @click.prevent.stop=\"toggle\"\n                        class=\"icon\"\n                        :class=\"nodeIcon\"\n                        ></span>\n                    <label><: caption :></label>\n                </div>\n            </div>\n            <div :class=\"isRoot ? '' : 'node-children'\" v-show=\"open\" v-if=\"isFolder\">\n                <tree-list\n                    @add-relation=\"addRelation\"\n                    @remove-relation=\"removeRelation\"\n                    @remove-all-relations=\"removeAllRelations\"\n                    v-for=\"(child, index) in item.children\"\n                    :key=\"index\"\n                    :item=\"child\"\n                    :multiple-choice=\"multipleChoice\"\n                    :related-objects=\"relatedObjects\"\n                    :object-id=objectId>\n                </tree-list>\n            </div>\n        </div>\n    `,\n\n    data() {\n        return {\n            stageRelated: false,\n            related: false,\n            open: true,\n        }\n    },\n\n    props: {\n        multipleChoice: {\n            type: Boolean,\n            default: true,\n        },\n        captionField: {\n            type: String,\n            required: false,\n            default: 'name',\n        },\n        childrenField: {\n            type: String,\n            required: false,\n            default: 'children',\n        },\n        item: {\n            type: Object,\n            required: true,\n            default: () => {},\n        },\n        relatedObjects: {\n            type: Array,\n            default: () => [],\n        },\n        objectId: {\n            type: String,\n            required: false,\n        }\n    },\n\n    computed: {\n        /**\n         * caption used in label\n         *\n         * @return {String}\n         */\n        caption() {\n            return this.item[this.captionField];\n        },\n\n        /**\n         * check if current node is a folder\n         *\n         * @return {Boolean}\n         */\n        isFolder() {\n            return this.item.children &&\n                !!this.item.children.length;\n        },\n\n        /**\n         * check if current node is a root node\n         *\n         * @return {Boolean}\n         */\n        isRoot() {\n            return this.item.root || false;\n        },\n\n        /**\n         * check if current node is already related\n         *\n         * @return {Boolean}\n         */\n        isRelated() {\n            if (!this.item.id) {\n                return false;\n            }\n\n            return !!this.relatedObjects.filter(related => related.id === this.item.id).length;\n        },\n\n        /**\n         * check if current object is in item path\n         */\n        isCurrentObjectInPath() {\n            return this.item && this.item.object && this.item.object.meta.path.indexOf(this.objectId) !== -1;\n        },\n\n        /**\n         * compute correct icon css class name according to this node\n         *\n         * @return {String} css class name\n         */\n        nodeIcon() {\n            let css = '';\n            css += this.isFolder\n                ? this.open\n                    ? 'icon-down-dir'\n                    : 'icon-right-dir'\n                : 'unicode-branch'\n\n            return css;\n        },\n\n        /**\n         * compute correct css class name according to this node\n         *\n         * @return {String} css class name\n         */\n        treeListMode() {\n            let css = [];\n            if (this.isRoot) {\n                css.push('root-node');\n            }\n\n            if (!this.multipleChoice) {\n                css.push('tree-list-single-choice');\n            } else {\n                css.push('tree-list-multiple-choice');\n            }\n\n            if (this.isCurrentObject) {\n                css.push('disabled');\n            }\n\n            return css.join(' ');\n        }\n    },\n\n    watch: {\n        /**\n         * watch related used as model for tree-list in multiple-choice mode, used as model for checkboxes\n         * set the stageRelated value\n         *\n         * @return {void}\n         */\n        related(value) {\n            this.stageRelated = value;\n        },\n\n        /**\n         * watch stageRelated used as model for tree-list in single-choice mode and triggers an event according to the state of t\n         * - true: add-relation\n         * - false: remove-relation\n         *\n         * @return {void}\n         */\n        stageRelated(value) {\n            if (!this.item.object) {\n                return;\n            }\n            if (value) {\n                this.$emit('add-relation', this.item.object);\n            } else {\n                this.$emit('remove-relation', this.item.object);\n            }\n        },\n\n        /**\n         * watch relatedObjects and check if is already related\n         *\n         * @return {void}\n         */\n        relatedObjects() {\n            this.related = this.isRelated;\n        },\n    },\n\n    methods: {\n        /**\n         * toggle children visibility\n         *\n         * @return {void}\n         */\n        toggle() {\n            if (this.isFolder) {\n                this.open = !this.open;\n            }\n        },\n\n        /**\n         * triggers add-relation event in order to pass object to upper component\n         * tree-view handles the addition\n         *\n         * @param {Object} rel\n         *\n         * @return {void}\n         */\n        addRelation(rel) {\n            this.$emit('add-relation', rel);\n        },\n\n        /**\n         * triggers remove-relation event in order to pass object to upper component\n         * tree-view handles the removal\n         *\n         * @param {Object} rel\n         *\n         * @return {void}\n         */\n        removeRelation(rel) {\n            this.$emit('remove-relation', rel);\n        },\n\n        /**\n         * triggers remove-all-relations event in order to remove all pending relations\n         *\n         * @return {void}\n         */\n        removeAllRelations() {\n            this.$emit('remove-all-relations');\n        },\n\n        /**\n         * single-choice mode: select current tree entry for staging\n         *\n         * @return {void}\n         */\n        select() {\n            // avoid user selecting same tree item (or in path) as current object\n            if (this.isCurrentObjectInPath) {\n                return;\n            }\n            // TO-DO handle folder removal from tree or folder as root\n\n            // let oldValue = this.stageRelated;\n            this.$emit('remove-all-relations');\n            // if (oldValue) {\n            //     this.$emit('add-relation', { id: null, type: 'folders'});\n            // }\n            this.stageRelated = !this.stageRelated;\n        }\n    }\n}\n","/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Elements/trees.twig\n *\n * <tree-view> component used for ModulesPage -> View\n *\n * @prop {String} relationName\n * @prop {Boolean} loadOnStart load content on component init\n * @prop {Boolean} multipleChoice\n *\n */\n\nimport RelationshipsView from 'app/components/relation-view/relationships-view/relationships-view';\nimport TreeList from 'app/components/tree-view/tree-list/tree-list';\nimport sleep from 'sleep-promise';\n\nexport default {\n    extends: RelationshipsView,\n    components: {\n        TreeList\n    },\n\n    props: {\n        relatedObjects: {\n            type: Array,\n            default: () => [],\n        },\n        loadOnStart: [Boolean, Number],\n        multipleChoice: {\n            type: Boolean,\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            jsonTree: {},   // json tree version of the objects list based on path\n        }\n    },\n\n    /**\n     * load content if flag set to true after component is created\n     *\n     * @return {void}\n     */\n    created() {\n        this.loadTree();\n    },\n\n    watch: {\n        /**\n         * watch pendingRelations used as a model for view's checkboxes and separates relations in\n         * ones to be added and ones to be removed according to the already related objects Array\n         *\n         * @param {Array} pendingRels\n         */\n        pendingRelations(pendingRels) {\n            // handles relations to be added\n            let relationsToAdd = pendingRels.filter((rel) => {\n                return !this.isRelated(rel.id);\n            });\n\n            if (!this.multipleChoice) {\n                if(relationsToAdd.length) {\n                    relationsToAdd = relationsToAdd[0];\n                }\n            }\n\n            this.relationsData = this.relationFormatterHelper(relationsToAdd);\n\n            // handles relations to be removes\n            let relationsToRemove = this.relatedObjects.filter((rel) => {\n                return !this.isPending(rel.id);\n            });\n\n            // emit event to pass data to parent\n            this.$emit('remove-relations', relationsToRemove);\n        },\n\n        /**\n         * watch objects and insert already related objects into pendingRelations\n         *\n         * @return {void}\n         */\n        objects() {\n            this.pendingRelations = this.objects.filter((rel) => {\n                return this.isRelated(rel.id);\n            });\n        },\n    },\n\n    methods: {\n        /**\n         * check loadOnStart prop and load content if set to true\n         *\n         * @return {void}\n         */\n        async loadTree() {\n            if (this.loadOnStart) {\n                var t = (typeof this.loadOnStart === 'number')? this.loadOnStart : 0;\n                await sleep(t);\n                await this.loadObjects();\n                this.jsonTree = {\n                    name: 'Root',\n                    root: true,\n                    object: {},\n                    children: this.createTree(),\n                };\n            }\n        },\n\n        /**\n         * add an object from prendingrelations Array if not present\n         *\n         * @event add-relation triggered from sub components\n         *\n         * @param {Object} related\n         *\n         * @return {void}\n         */\n        addRelation(related) {\n            if (!related || !related.id === undefined) {\n                console.error('[addRelation] needs first param (related) as {object} with property id set');\n                return;\n            }\n            if (!this.containsId(this.pendingRelations, related.id)) {\n                this.pendingRelations.push(related);\n            }\n        },\n\n        /**\n         * remove an object from pendingRelations Array\n         *\n         * @event remove-relation triggered from sub components\n         *\n         * @param {Object} related\n         *\n         * @return {void}\n         */\n        removeRelation(related) {\n            if (!related || !related.id) {\n                console.error('[removeRelation] needs first param (related) as {object} with property id set');\n                return;\n            }\n            this.pendingRelations = this.pendingRelations.filter(pending => pending.id !== related.id);\n        },\n\n        /**\n         * remove all related objects from pendingRelations Array\n         *\n         * @event remove-all-relations triggered from sub components\n         *\n         * @return {void}\n         */\n        removeAllRelations() {\n            this.pendingRelations = [];\n            this._setChildrenData(this, 'stageRelated', false);\n        },\n\n        /**\n         * util function to set recursively all sub-components 'dataName' var with dataValue\n         *\n         * @param {Object} obj\n         * @param {String} dataName\n         * @param {any} dataValue\n         */\n        _setChildrenData(obj, dataName, dataValue) {\n            if (obj !== undefined && dataName in obj) {\n                obj[dataName] = dataValue;\n            }\n\n            obj.$children.forEach(child => {\n                this._setChildrenData(child, dataName, dataValue);\n            });\n        },\n\n        /**\n         * create a json Tree from a list of objects with path\n         *\n         * @return {Object} json tree\n         */\n        createTree() {\n            let jsonTree = [];\n            this.objects.forEach((obj) => {\n                let path = obj.meta.path && obj.meta.path.split('/');\n                if (path.length) {\n                    // Remove first blank element from the parts array.\n                    path.shift();\n\n                    // initialize currentLevel to root\n                    let currentLevel = jsonTree;\n\n                    path.forEach((id) => {\n                        // check to see if the path already exists.\n                        let existingPath = this.findPath(currentLevel, id);\n\n\n                        if (existingPath) {\n                            // The path to this item was already in the tree, so I set the current level to this path's children\n                            currentLevel = existingPath.children;\n                        } else {\n                            // create a new node\n                            let currentObj = obj;\n\n                            // if current object is not the same as the discovered node get it from objects array\n                            if (currentObj.id !== id) {\n                                currentObj = this.findObjectById(id);\n                            }\n\n                            let newNode = {\n                                id: id,\n                                related: this.isRelated(id),\n                                name: currentObj.attributes.title || '',\n                                object: currentObj,\n                                children: [],\n                            };\n\n                            currentLevel.push(newNode);\n                            currentLevel = newNode.children;\n                        }\n                    });\n                }\n            });\n\n            return jsonTree;\n        },\n\n        /**\n         * check if part is already contained in the tree\n         *\n         * @param {Number} paths\n         * @param {Number} part\n         *\n         * @return {Object|Boolean}\n         */\n        findPath(paths, part) {\n            let path = paths.filter(path => path.id === part);\n            return path.length ? path[0] : false;\n        },\n\n        /**\n         * check if relatedObjects contains object with a specific id\n         *\n         * @param {Number} id\n         *\n         * @return {Boolean}\n         */\n        isRelated(id) {\n            return this.relatedObjects.filter((relatedObject) => {\n                return id === relatedObject.id;\n            }).length ? true : false;\n        },\n\n        /**\n         * check if pendingRelations contains object with a specific id\n         *\n         * @param {Number} id\n         *\n         * @return {Boolean}\n         */\n        isPending(id) {\n            return this.pendingRelations.filter((pendingRelation) => {\n                return id === pendingRelation.id;\n            }).length ? true : false;\n        },\n    }\n}\n","// flatpickr\n\n/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Elements/relations.twig\n *\n * <staggered-list> component used for lists with staggered animation\n *\n */\n\nimport flatpickr from 'flatpickr/dist/flatpickr.min';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst datepickerOptions = {\n    enableTime: false,\n    dateFormat: \"Y-m-d H:i\",\n    altInput: true,\n    altFormat: \"F j, Y - H:i\",\n};\n\nexport default {\n    install(Vue) {\n        Vue.directive('datepicker', {\n            /**\n             * create flatpicker instance when element is inserted\n             *\n             * @param {Object} element DOM object\n             */\n            inserted (element, dir, vueEl) {\n                let options = datepickerOptions;\n\n                if (vueEl.data && vueEl.data.attrs && vueEl.data.attrs.time) {\n                    options.enableTime = vueEl.data.attrs.time;\n                }\n\n                try {\n                    let datePicker = flatpickr(element, options);\n\n                    let clearButton = document.createElement('span');\n                    clearButton.classList.add('clear-button');\n                    clearButton.innerHTML = '&times;';\n                    clearButton.addEventListener('click', () => {\n                        datePicker.clear();\n                    });\n\n                    element.parentElement.appendChild(clearButton);\n                } catch (err) {\n                    console.error(err);\n                }\n            },\n        })\n    }\n}\n","/**\n *\n * v-jsoneditor directive to activate jsoneditor on element\n *\n */\n\nimport JSONEditor from 'jsoneditor/dist/jsoneditor.min';\nimport 'jsoneditor/dist/jsoneditor.min.css';\n\nconst jsonEditorOptions = {\n    \"mode\": \"code\",\n    \"modes\": [\"tree\", \"code\"],\n    \"history\": true,\n    \"search\": true,\n    onChange: function (element) {\n        if (element) {\n            const json = element.jsonEditor.get();\n            try {\n                element.value = JSON.stringify(json);\n            } catch(e) {\n                console.error(e);\n            }\n        }\n    },\n};\n\nexport default {\n    install(Vue) {\n        Vue.directive('jsoneditor', {\n            // element: null,\n\n            /**\n             * create jsoneditor instance when element is inserted\n             *\n             * @param {Object} element DOM object\n             */\n            inserted (element, binding, vnode, oldVnode) {\n                const content = element.value;\n                try {\n                    const json = JSON.parse(content) || {};\n\n                    if (json) {\n                        element.style.display = \"none\";\n                        let jsonEditor = document.createElement('div');\n                        jsonEditor.className = \"jsoneditor-container\";\n                        element.parentElement.insertBefore(jsonEditor, element);\n                        element.jsonEditor = new JSONEditor(jsonEditor, jsonEditorOptions);\n                        element.jsonEditor.set(json);\n                    }\n                } catch (err) {\n                    console.error(err);\n                }\n            },\n        })\n    }\n}\n","/**\n *\n * v-richeditor directive to activate ckeditor on element\n *\n */\n\nimport { CkeditorConfig } from 'config/config';\n\nexport default {\n    install(Vue) {\n        Vue.directive('richeditor', {\n            /**\n             * When the bound element is inserted into the init CKeditor\n             *\n             * @param {Object} element DOM object\n             */\n            inserted (element) {\n                const configKey = element.getAttribute('ckconfig');\n                let loadedConfig = null;\n                if (CkeditorConfig) {\n                    loadedConfig = CkeditorConfig[configKey];\n                }\n\n                CKEDITOR.replace(element, loadedConfig);\n            },\n        })\n    }\n}\n","/**\n * Mixins: PaginatedContentMixin\n *\n *\n */\n\nexport const DEFAULT_PAGINATION = {\n    count: 1,\n    page: 1,\n    page_size: 20,\n    page_count: 1,\n}\n\nexport const PaginatedContentMixin = {\n    data() {\n        return {\n            objects: [],\n            endpoint: null,\n\n            pagination: DEFAULT_PAGINATION,\n        }\n    },\n\n    methods: {\n        /**\n         * fetch paginated objects based on this.endpoint value\n         *\n         * @param {Boolean} autoload if false it doesn't update this.objects [DEFAULT = true]\n         *\n         * @return {Promise} repsonse from server\n         */\n        getPaginatedObjects(autoload = true) {\n            let baseUrl = window.location.href;\n\n            if (this.endpoint) {\n                let requestUrl = `${baseUrl}/${this.endpoint}`;\n                const options =  {\n                    credentials: 'same-origin',\n                    headers: {\n                        'accept': 'application/json',\n                    }\n                }\n\n                requestUrl = this.setPagination(requestUrl);\n\n                return fetch(requestUrl, options)\n                    .then((response) => response.json())\n                    .then((json) => {\n                        let objects = (Array.isArray(json.data) ? json.data : [json.data]) || [];\n                        if (!json.data) {\n                            // api response with error\n                            objects = [];\n                        }\n\n                        if (autoload) {\n                            this.objects = objects;\n                        }\n                        this.pagination = json.meta && json.meta.pagination || this.pagination;\n\n                        return objects;\n                    })\n                    .catch((error) => {\n                        console.error(error);\n                    });\n            } else {\n                return Promise.reject();\n            }\n        },\n\n        /**\n         * Add pagination info to endpoint url\n         *\n         * @param {String} url\n         *\n         * @return {String} formatted url\n         */\n        setPagination(url) {\n            let pagination = '';\n            let qi = '?';\n            const separator = '&';\n\n            Object.keys(this.pagination).forEach((key, index) => {\n                pagination += `${index ? separator : ''}${key}=${this.pagination[key]}`;\n            });\n\n            let hasQueryIdentifier = url.indexOf(qi) === -1;\n            if (!hasQueryIdentifier) {\n                qi = '&';\n            }\n            return `${url}${qi}${pagination}`;\n        },\n\n        /**\n         * find object with specific id\n         *\n         * @param {Number} id\n         *\n         * @return {Object}\n         */\n        findObjectById(id) {\n            let obj = this.objects.filter(o => o.id === id);\n            return obj.length && obj[0];\n        },\n\n        /**\n         * append more objects to current array of objects\n         *\n         * @param {Number} qty number of elements to load\n         *\n         * @return {Promise} repsonse from server\n         */\n        async loadMore(qty = DEFAULT_PAGINATION.page_size) {\n            if (this.pagination.page_items < this.pagination.count) {\n                let moreObjects = await this.nextPage(false);\n                this.pagination.page_items = this.pagination.page_items + qty <= this.pagination.count ? this.pagination.page_items + qty : this.pagination.count;\n                // this.pagination.page--;\n\n                const last = this.objects.length;\n                this.objects.splice(last, 0, ...moreObjects);\n            }\n        },\n\n\n        toPage(i) {\n            this.pagination.page = i || 1;\n            return this.getPaginatedObjects(true);\n        },\n\n        /**\n         * load first page of content\n         *\n         * @param {Boolean} autoload if false it doesn't update this.objects [DEFAULT = true]\n         *\n         * @return {Promise} repsonse from server with new data\n         */\n        firstPage(autoload = true) {\n            if (this.pagination.page !== 1) {\n                this.pagination.page = 1;\n\n                return this.getPaginatedObjects(autoload);\n            }\n\n            return Promise.resolve([]);\n        },\n\n        /**\n         * load last page of content\n         *\n         * @param {Boolean} autoload if false it doesn't update this.objects [DEFAULT = true]\n         *\n         * @return {Promise} repsonse from server with new data\n         */\n        lastPage(autoload = true) {\n            if (this.pagination.page !== this.pagination.page_count) {\n                this.pagination.page = this.pagination.page_count;\n\n                return this.getPaginatedObjects(autoload);\n            }\n\n            return Promise.resolve([]);\n        },\n\n        /**\n         * load next page of content\n         *\n         * @param {Boolean} autoload if false it doesn't update this.objects [DEFAULT = true]\n         *\n         * @return {Promise} repsonse from server with new data\n         */\n        nextPage(autoload = true) {\n            if (this.pagination.page < this.pagination.page_count) {\n                this.pagination.page = this.pagination.page + 1;\n\n                return this.getPaginatedObjects(autoload);\n            }\n\n            return Promise.resolve([]);\n        },\n\n        /**\n         * load previous page of content\n         *\n         * @param {Boolean} autoload if false it doesn't update this.objects [DEFAULT = true]\n         *\n         * @return {Promise} repsonse from server with new data\n         */\n        prevPage() {\n            if (this.pagination.page > 1) {\n                this.pagination.page = this.pagination.page - 1;\n\n                return this.getPaginatedObjects();\n            }\n\n            return Promise.resolve();\n        },\n\n        /**\n         * set Pagination page size\n         *\n         * @param {Number} size\n         *\n         * @return {void}\n         */\n        setPageSize(size) {\n            this.pagination.page_size = size;\n            this.pagination.page = 1;\n        },\n    }\n}\n","/**\n * Templates that uses this component (directly or indirectly)\n *  Template/Modules/index.twig\n *  - Element/Toolbar/filter.twig\n *  - Element/Toolbar/pagination.twig\n *\n *\n * <modules-index> component used for ModulesPage -> Index\n *\n */\n// Vue.component('modules-index', {\n\nexport default {\n    /**\n     * Component properties\n     *\n     * @type {Object} props properties\n     */\n    props: {\n        ids: {\n            type: String,\n            default: () => [],\n        },\n    },\n\n    /**\n     * component properties\n     *\n     * @returns {Object}\n     */\n    data() {\n        return {\n            allIds: [],\n            selectedRows: [],\n            status: '',\n        };\n    },\n\n    /**\n     * @inheritDoc\n     */\n    created() {\n        try {\n            this.allIds = JSON.parse(this.ids);\n        } catch(error) {\n            console.error(error);\n        }\n    },\n\n    computed: {\n        selectedIds() {\n            return JSON.stringify(this.selectedRows);\n        },\n        allChecked() {\n            return JSON.stringify(this.selectedRows.sort()) == JSON.stringify(this.allIds.sort());\n        }\n    },\n\n    /**\n     * component methods\n     */\n    methods: {\n        /**\n         * Click con check/uncheck all\n         *\n         * @return {void}\n         */\n        toggleAll() {\n            if (this.allChecked) {\n                this.unCheckAll();\n            } else {\n                this.checkAll();\n            }\n        },\n        checkAll() {\n            this.selectedRows = JSON.parse(JSON.stringify(this.allIds));\n        },\n        unCheckAll() {\n            this.selectedRows = [];\n        },\n\n        /**\n         * Submit bulk export form\n         *\n         * @return {void}\n         */\n        exportSelected() {\n            if (this.selectedRows.length < 1) {\n                return;\n            }\n            document.getElementById('form-export').submit();\n        },\n\n        /**\n         * Submit bulk change status form\n         *\n         * @return {void}\n         */\n        setStatus(status, evt) {\n            if (this.selectedRows.length < 1) {\n                return;\n            }\n            this.status = status;\n            this.$nextTick( () => {\n                document.getElementById('form-status').submit();\n            });\n        },\n\n        /**\n         * Submit bulk trash form\n         *\n         * @return {void}\n         */\n        trash() {\n            if (this.selectedRows.length < 1) {\n                return;\n            }\n            if (confirm('Move ' + this.selectedRows.length + ' item to trash')) {\n                document.getElementById('form-delete').submit();\n            }\n        },\n\n        /**\n         * selects a row when triggered from a container target that is parent of the relative checkbox\n         *\n         * @return {void}\n         */\n        selectRow(event) {\n            if(event.target.type != 'checkbox') {\n                event.preventDefault();\n                var cb = event.target.querySelector('input[type=checkbox]');\n                let position = this.selectedRows.indexOf(cb.value);\n                if (position != -1) {\n                    this.selectedRows.splice(position, 1);\n                } else {\n                    this.selectedRows.push(cb.value);\n                }\n            }\n        }\n    }\n}\n\n\n","/**\n * Templates that uses this component (directly or indirectly):\n *  Template/Modules/view.twig\n *\n * <modules-view> component used for ModulesPage -> View\n *\n */\n\nimport PropertyView from 'app/components/property-view/property-view';\nimport RelationView from 'app/components/relation-view/relation-view';\n\nexport default {\n    components: {\n        PropertyView,\n        RelationView,\n    },\n\n    /**\n     * component properties\n     *\n     * @returns {Object}\n     */\n    data() {\n        return {\n            tabsOpen: true,\n        };\n    },\n\n    computed: {\n        keyEvents() {\n            return {\n                'esc': {\n                    keyup: this.toggleTabs,\n                },\n            }\n        }\n    },\n\n    methods: {\n        toggleTabs() {\n            return this.tabsOpen = !this.tabsOpen;\n        }\n    }\n}\n\n\n","// Vue configs...\n\nexport const VueConfig = {\n    devtools: true,\n}\n\nexport const VueOptions = {\n    delimiters: ['<:', ':>'],\n}\n\n// Vue.config.devtools = true;\n\n// Custom delimiters, avoid `visual` conflict with Twig {{ }} and {% %}\n// Vue.options.delimiters = ['<:', ':>'];\n\n// CKeditor configs...\n\nexport const CkeditorConfig = {\n    configFull: {\n        toolbar: [\n            { name: 'document', groups: [ 'mode' ], items: [ 'Source'] },\n            { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ], items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat' ] },\n            { name: 'paragraph', groups: [ 'list','blocks', 'align' ], items: [ 'NumberedList', 'BulletedList', '-', 'Blockquote', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock' ] },\n            { name: 'links', items: [ 'Link', 'Unlink', 'Anchor' ] },\n            { name: 'editAttributes', items: [ 'Attr' ] },\n            { name: 'editing', groups: [ 'find'], items: [ 'Find', 'Replace' ] },\n            { name: 'insert', items: [ 'Image', 'Table', 'HorizontalRule', 'SpecialChar', 'Formula' ] },\n            { name: 'tools', items: [ 'ShowBlocks', 'AutoCorrect' ] },\n            { name: 'styles', items: [ 'Format' , 'Styles'] },\n            { name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },\n        ],\n        allowedContent: true,\n        language: BEDITA.currLang2,\n        entities:false,\n        fillEmptyBlocks:false,\n        forcePasteAsPlainText:true,\n        startupOutlineBlocks: true,\n    },\n\n    configNormal: {\n        toolbar: [\n            { name: 'document', groups: [ 'mode' ], items: [ 'Source'] },\n            { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ], items: [ 'Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat' ] },\n            { name: 'links', items: [ 'Link', 'Unlink'] },\n            { name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },\n        ],\n        allowedContent: true,\n        language: BEDITA.currLang2,\n        entities:false,\n        fillEmptyBlocks:false,\n        forcePasteAsPlainText:true,\n        startupOutlineBlocks: true,\n    },\n\n    configSimple: {\n        toolbar: [\n            { name: 'document', groups: [ 'mode' ], items: [ 'Source'] },\n            { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ], items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat' ] },\n            { name: 'links', items: [ 'Link', 'Unlink'] },\n            { name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'Undo', 'Redo' ] },\n            { name: 'tools', items: [ 'ShowBlocks' ] },\n        ],\n        allowedContent: true,\n        language: BEDITA.currLang2,\n        entities:false,\n        fillEmptyBlocks:false,\n        forcePasteAsPlainText:true,\n        startupOutlineBlocks: true,\n    },\n};\n","// removed by extract-text-webpack-plugin"],"sourceRoot":""}