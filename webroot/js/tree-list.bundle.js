(window.webpackJsonp=window.webpackJsonp||[]).push([["tree-list"],{"./src/Template/Layout/js/app/components/tree-view/tree-list/tree-list.js":function(e,t,i){"use strict";i.r(t),t.default={name:"tree-list",template:'\n        <div\n            class="tree-list-node"\n            :class="treeListMode">\n\n            <div v-if="!isRoot">\n                <div v-if="multipleChoice"\n                    class="node-element"\n                    :class="{\n                        \'tree-related-object\': isRelated,\n                        \'disabled\': isCurrentObjectInPath,\n                        \'node-folder\': isFolder,\n                    }">\n\n                    <span\n                        @click.prevent.stop="toggle"\n                        class="icon"\n                        :class="nodeIcon"\n                        ></span>\n                    <input\n                        type="checkbox"\n                        :value="item"\n                        v-model="related"\n                    />\n                    <label\n                        @click.prevent.stop="toggle"\n                        :class="isFolder ? \'is-folder\' : \'\'"><: caption :></label>\n                </div>\n                <div v-else class="node-element"\n                    :class="{\n                        \'tree-related-object\': isRelated || stageRelated,\n                        \'was-related-object\': isRelated && !stageRelated,\n                        \'disabled\': isCurrentObjectInPath\n                    }"\n\n                    @click.prevent.stop="select">\n                    <span\n                        @click.prevent.stop="toggle"\n                        class="icon"\n                        :class="nodeIcon"\n                        ></span>\n                    <label><: caption :></label>\n                </div>\n            </div>\n            <div :class="isRoot ? \'\' : \'node-children\'" v-show="open" v-if="isFolder">\n                <tree-list\n                    @add-relation="addRelation"\n                    @remove-relation="removeRelation"\n                    @remove-all-relations="removeAllRelations"\n                    v-for="(child, index) in item.children"\n                    :key="index"\n                    :item="child"\n                    :multiple-choice="multipleChoice"\n                    :related-objects="relatedObjects"\n                    :object-id=objectId>\n                </tree-list>\n            </div>\n        </div>\n    ',data:()=>({stageRelated:!1,related:!1,open:!0}),props:{multipleChoice:{type:Boolean,default:!0},captionField:{type:String,required:!1,default:"name"},childrenField:{type:String,required:!1,default:"children"},item:{type:Object,required:!0,default:()=>{}},relatedObjects:{type:Array,default:()=>[]},objectId:{type:String,required:!1}},computed:{caption(){return this.item[this.captionField]},isFolder(){return this.item.children&&!!this.item.children.length},isRoot(){return this.item.root||!1},isRelated(){return!!this.item.id&&!!this.relatedObjects.filter(e=>e.id===this.item.id).length},isCurrentObjectInPath(){return this.item&&this.item.object&&-1!==this.item.object.meta.path.indexOf(this.objectId)},nodeIcon(){let e="";return e+=this.isFolder?this.open?"icon-down-dir":"icon-right-dir":"unicode-branch"},treeListMode(){let e=[];return this.isRoot&&e.push("root-node"),this.multipleChoice?e.push("tree-list-multiple-choice"):e.push("tree-list-single-choice"),this.isCurrentObject&&e.push("disabled"),e.join(" ")}},watch:{related(e){this.stageRelated=e},stageRelated(e){this.item.object&&(e?this.$emit("add-relation",this.item.object):this.$emit("remove-relation",this.item.object))},relatedObjects(){this.related=this.isRelated}},methods:{toggle(){this.isFolder&&(this.open=!this.open)},addRelation(e){this.$emit("add-relation",e)},removeRelation(e){this.$emit("remove-relation",e)},removeAllRelations(){this.$emit("remove-all-relations")},select(){this.isCurrentObjectInPath||(this.$emit("remove-all-relations"),this.stageRelated=!this.stageRelated)}}}}}]);