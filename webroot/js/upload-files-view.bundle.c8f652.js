(window.webpackJsonp=window.webpackJsonp||[]).push([["upload-files-view"],{27:function(e,t,s){"use strict";const r={data:()=>({_mutationObserver:null,attrs:[]}),mounted(){this.setMutationObserver(this.attrs)},destroyed(){this._mutationObserver.disconnect()},methods:{setMutationObserver(e){this._mutationObserver=new MutationObserver(this.onAttributeChanges),this._mutationObserver.observe(this.$el,{attributes:!0,attributeFilter:e,subtree:!0,attributeOldValue:!0})},setObservableAttrs(e){this.attrs=e,this._mutationObserver.disconnect(),this.setMutationObserver(this.attrs)},onAttributeChanges(e,t){}}};s.d(t,"a",function(){return o});const o={mixins:[r],props:{acceptedDrop:{type:Array,default:()=>[]}},data:()=>({attrs:["droppable","accepted-drop"],from:{},draggedElement:null,overElement:null,dropElement:null,acceptedDropArray:[],draggableElements:[],dragOverFirst:!0,antiGlitchTimer:null,_dropEnabled:!1}),mounted(){this.initDroppableElements(),this.initDraggableElements()},destroyed(){this.dropElement.removeEventListener("dragover",this.onDragover,!1),this.dropElement.removeEventListener("dragleave",this.onDragleave,!1),this.dropElement.removeEventListener("drop",this.onDrop,!1),this.draggableElements.length&&this.$el.removeEventListener("dragstart",this.onDragstart,!1)},methods:{onAttributeChanges(e,t){for(var s of e)if("attributes"==s.type)if("droppable"===s.attributeName)this.enableDrop(),this.dropElement=s.target;else if("accepted-drop"===s.attributeName){let e=s.target.getAttribute("accepted-drop");e&&(this.acceptedDropArray=e.split(","))}},initDroppableElements(){this.dropElement=this.$el;let e=this.$el.querySelector("[droppable]");if(e){this.enableDrop(),this.dropElement=e;let t=e.getAttribute("accepted-drop");t&&(this.acceptedDrop=t.split(","))}this.dropElement.addEventListener("drop",this.onDrop,!0),this.dropElement.addEventListener("dragover",this.onDragover,!0),this.dropElement.addEventListener("dragleave",this.onDragleave,!0)},initDraggableElements(){let e=this.$el.querySelectorAll("[draggable]");e.length&&(this.draggableElements=e,this.$el.addEventListener("dragstart",this.onDragstart,!0))},setDragdropData(e,t=null){e.dragdrop={dragged:this.draggedElement,over:this.overElement,drop:this.dropElement,data:t}},onDragstart(e){this.draggedElement=e.target,this.setDragdropData(e),this.$emit("dragstart",e)},onDragover(e){if(e.preventDefault(),e.stopPropagation(),this._dropEnabled){if(this.acceptedDrop.length){if(!this.acceptedDrop.reduce((e,t)=>e=e||this.draggedElement.matches(t),!1))return}window.clearTimeout(this.antiGlitchTimer),this.overElement=e.target,this.setDragdropData(e),this.dropElement.classList.add("dragover"),this.dragOverFirst&&(this.dragOverFirst=!1,this.$emit("dragover-once",e)),this.$emit("dragover",e)}},onDragleave(e){e.preventDefault(),e.stopPropagation(),this.overElement=null,this.setDragdropData(e),this.dragOverFirst=!0,this.antiGlitchTimer=window.setTimeout(()=>{this.dropElement.classList.remove("dragover"),this.isOverChild(e)||this.$emit("dragleave")},25)},onDrop(e){if(e.preventDefault(),e.stopPropagation(),!this._dropEnabled)return;this.setDragdropData(e),this.dropElement.classList.remove("dragover"),this.$emit("dragleave");let t=e.target.files||e.dataTransfer.files;t.length?(this.setDragdropData(e,t),this.$emit("drop-files",e)):this.$emit("drop",e)},isOverChild(e){if(!this.dropElement)return!1;let t=this.dropElement.getBoundingClientRect();const s=document.body.clientWidth,r=document.body.clientHeight;return!(e.clientX<=0||e.clientY<=0||e.clientX>s||e.clientY>r)&&(e.clientY>=t.top&&e.clientY<=t.bottom&&e.clientX>=t.left&&e.clientX<=t.right)},disableDrop(){this._dropEnabled=!1},enableDrop(){this._dropEnabled=!0}}}},91:function(e,t,s){"use strict";s.r(t);var r=s(3),o=s(27),a=s(42),i=s.n(a);let n;const l={created(){n=this.createCustomAxios()},computed:{axios:()=>n},methods:{createCustomAxios(){return i.a.create({baseURL:BEDITA.base,timeout:3e4,credentials:"same-origin",headers:{accept:"application/json","content-type":"multipart/form-data","X-CSRF-Token":this.getCSFRToken()},validateStatus:e=>e>=200&&e<300})},getAxios:()=>i.a}};var d=s(1);t.default={mixins:[o.a,l],inject:["getCSFRToken"],template:'\n    <div class="upload-files">\n        <section class="upload-list" droppable>\n            <div class="upload-info"\n                :key="index"\n                v-for="(info, index) in Array.from(uploadProgressInfo.values())">\n\n                <span class="name"><: info.file.name :></span>\n\n                <button v-show="!info.error && !info.cancelled && !info.done"\n                    class="abort icon-cancel"\n                    :class="{\'is-loading-spinner\': info.pending }"\n                    @click="abortUpload(info.file)">\n                </button>\n                <button v-show="!info.error && !info.cancelled && info.done" class="success icon-ok"></button>\n                <button v-show="info.error || info.cancelled" class="retry icon-ccw" @click="tryUpload([info.file])"></button>\n\n                <div class="progress-bar">\n                    <div class="progress-bar-status" :class="progressBarCss(info)" :style="progressBarStep(info)"></div>\n                </div>\n                <div class="error">\n                    <: info.errorMsg :>\n                </div>\n            </div>\n        </section>\n        <footer v-show="actionRequired">\n            <button v-show="showAddSuccesfulUploadsButton" class="has-background-info has-text-white add-uploads-action"\n                @click.prevent="addSuccesfulUploads()"><: t(\'Add Uploaded\') :>\n            </button>\n            <button class="has-background-info has-text-white retry-action"\n                @click.prevent="tryUpload(getFailedUploads())"><: t(\'Retry All\') :>\n            </button>\n            <button class="has-background-info has-text-white"\n                @click.prevent="closePanel()"><: t(\'Close \') :>\n            </button>\n        </footer>\n\n    </div>\n    ',props:{files:{type:FileList,required:!0},acceptedFiles:{type:Array,default:()=>[]},knownTypes:{type:Array,default:()=>["audio","video","image"]}},data:()=>({createdObjects:[],uploadProgressInfo:new Map,axiosCancelTokens:new Map,actionRequired:!1,showAddSuccesfulUploadsButton:!1}),mounted(){this.$on("drop-files",e=>{let t=e.dragdrop.data;t&&this.tryUpload(this.setupProgress(this.filterAcceptedFiles(t)))}),this.tryUpload(this.setupProgress(this.filterAcceptedFiles(this.files)))},destroyed(){this.uploadProgressInfo.clear()},watch:{createdObjects:{handler(e){this.showAddSuccesfulUploadsButton=!!e.length&&!this.isUploadInProgress()},deep:!0,immediate:!0},files:{handler(e){this.tryUpload(this.setupProgress(this.filterAcceptedFiles(e)))},deep:!0}},methods:{progressBarStep:e=>({width:`${e.progress}%`}),progressBarCss:e=>({done:e.done,error:e.error,pending:e.pending,"in-progress":!e.done&&!e.error&&e.progress,cancelled:e.cancelled}),abortUpload(e){this.axiosCancelTokens.get(e)&&this.axiosCancelTokens.get(e).cancel(Object(d.t)("Operation canceled by the user"))},filterAcceptedFiles(e=[]){return[...e].filter(e=>0===this.acceptedFiles.length||!!this.acceptedFiles.filter(t=>e.type.includes(t)).length)},setupProgress(e){let t=[];for(let s=0;s<e.length;s++){let r=e[s];this.addProgressInfo(r)&&t.push(r)}return t},addSuccesfulUploads(){r.a.sendBack("upload-files:save",this.createdObjects)},async tryUpload(e){this.actionRequired=!1;try{await this.startFilesUpload(e),this.getFailedUploads().length?this.actionRequired=!0:this.areAllUploadFulfilled()&&setTimeout(()=>r.a.sendBack("upload-files:save",this.createdObjects),500)}catch(e){this.actionRequired=!0}},addProgressInfo(e){const t=`${e.lastModified}${e.size}`;return!this.uploadProgressInfo.has(t)&&(this.uploadProgressInfo.set(t,{file:e,progress:0,cancelled:!1,pending:!1,done:!1,error:!1,errorMsg:""}),this.$forceUpdate(),!0)},setProgressInfo(e,t=0,s=!1,r=!1,o=!1,a=""){const i=`${e.lastModified}${e.size}`,n=!o&&!s&&!r&&100===t;if(t<0&&this.uploadProgressInfo.has(i)){t=this.uploadProgressInfo.get(i).progress}this.uploadProgressInfo.set(i,{file:e,progress:t,cancelled:s,pending:n,done:o,error:r,errorMsg:a}),this.$forceUpdate()},startFilesUpload(e){let t=[];for(let s=0;s<e.length;s++)t.push(this.createObject(e[s]).then(e=>(e&&this.createdObjects.push(e),Promise.resolve(e))).catch(e=>Promise.reject(e)));return this.getAxios().all(t)},getFailedUploads(){let e=[];return this.uploadProgressInfo.forEach(t=>{(t.error||t.cancelled)&&e.push(t.file)}),e},areAllUploadFulfilled(){return[...this.uploadProgressInfo.values()].reduce((e,t)=>e=e&&t.done,!0)},isUploadInProgress(){return[...this.uploadProgressInfo.values()].reduce((e,t)=>e=e||t.pending||!(t.done||t.cancelled||t.error),!1)},createObject(e){if(!e)return!1;const t=this.createFormData(e),s=`/${this.getObjectType(e)}/saveJson`,r=this.getAxios().CancelToken.source();this.axiosCancelTokens.set(e,r);const o={onUploadProgress:t=>{const s=parseInt(Math.round(100*t.loaded/t.total));this.setProgressInfo(e,s)},onUploadCancelled:()=>this.setProgressInfo(e,-1,!0,!1,!1,"Upload Cancelled"),onUploadError:t=>this.setProgressInfo(e,100,!1,!0,!1,`Error from server: ${t.message?t.message:""}`),onUploadSuccess:()=>this.setProgressInfo(e,100,!1,!1,!0),cancelToken:r.token};return this.uploadFileRequest(s,t,o)},getObjectType(e){let t=e.type&&e.type.split("/")[0];const s=/audio/g.test(t)?"":"s";return-1===this.knownTypes.indexOf(t)&&(t="file"),`${t}${s}`},createFormData(e){const t=this.getObjectType(e),s=new FormData;return s.append("title",e.name),s.append("status","on"),s.append("file",e),s.append("model-type",t),s},uploadFileRequest(e,t,s){return this.axios.post(e,t,s).then(e=>{let t=e.data&&e.data.data;return t?(Array.isArray(t)&&(t=t[0]),s.onUploadSuccess(t),Promise.resolve(t)):Promise.reject(e)}).catch(e=>this.getAxios().isCancel(e)?(s.onUploadCancelled(),Promise.reject(e)):(s.onUploadError(e),Promise.reject(e)))},closePanel(){r.a.closePanel()}}}}}]);