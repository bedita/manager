(window.webpackJsonp=window.webpackJsonp||[]).push([["edit-relation-params"],{"./src/Template/Layout/js/app/components/edit-relation-params.js":function(e,t,a){"use strict";a.r(t);var n=a("./src/Template/Layout/js/app/components/panel-view.js");a("./node_modules/ttag/dist/index.js");t.default={template:'<div v-if="relationName" class="edit-relation">\n        <section>\n            <header class="tab unselectable">\n                <h2><span><: t(\'Edit parameters of\') :>: <: relationName | humanize :></span> &nbsp;</h2>\n                <a href="#" @click.prevent="closeParamsView()"><: t(\'close\') :></a>\n            </header>\n\n            <div class="object-attributes">\n                <h2><: t(\'Object\') :>: <: object.attributes.title :></h2>\n                <div>\n                    <span class="tag" :class="objectColorClass"><: object.type :></span>\n                    <span class="tag"><: object.attributes.status :></span>\n                </div>\n\n                <h2><: t(\'Related to\') :>: <: relatedName :></h2>\n                <div>\n                    <span class="tag" :class="relatedColorClass"><: related.type :></span>\n                    <span class="tag"><: relatedStatus :></span>\n                </div>\n            </div>\n\n            <form ref="paramsForm" class="params-list" @change="checkParams()" @keyup="checkParams()">\n                <div>\n                    <label><: t(\'Priority\') :></label>\n                    <input type="number" step="1" v-model.number="priority" />\n                </div>\n\n                <div v-for="(param, key) in schema">\n                    <label :title="key"><: param.description || key :>\n\n                        \x3c!-- Boolean -> switch button true/false ---\x3e\n                        <div v-if="param.type == \'boolean\'">\n                            <label class="switch">\n                                <input type="checkbox" v-model="editingParams[key] ">\n                                <span class="slider round"></span>\n                            </label>\n                        </div>\n\n                        <div v-if="param.type == \'string\'">\n                            \x3c!-- String, format: date-time -> datepicker ---\x3e\n                            <input v-if="param.format == \'date-time\'" v-datepicker time="true" v-model="editingParams[key]"></input>\n\n                            \x3c!-- String Enum -> select/option ---\x3e\n                            <div v-else-if="param.enum !== undefined">\n                                <select v-model="editingParams[key]">\n                                    <option v-for="item in param.enum" :value="item"><: item :></option>\n                                </select>\n                            </div>\n                            \x3c!-- String -> input text ---\x3e\n                            <input v-else type="text" v-model="editingParams[key]">\n                        </div>\n\n                        \x3c!-- Number -> input number ---\x3e\n                        <div v-if="param.type == \'number\'">\n                            <label>\n                                <input type="number" :name="key" step="any" v-model.number="editingParams[key]">\n                            </label>\n                        </div>\n\n                        \x3c!-- Integer -> input integer ---\x3e\n                        <div v-if="param.type == \'integer\'">\n                            <label>\n                                <input type="number" :name="key" v-model.number="editingParams[key]">\n                            </label>\n                        </div>\n                    </label>\n                </div>\n            </form>\n\n            <footer>\n                <p>\n                    <button v-show="isModified"\n                        class="has-background-info has-text-white"\n                        @click.prevent="saveParams()"><: t(\'Save \') :></button>\n                </p>\n            </footer>\n        </section>\n    </div>',props:{relationName:{type:String,default:""},object:{type:Object,default:()=>{}},related:{type:Object,default:()=>{}},schema:{type:Object,default:()=>{}}},computed:{relatedStatus(){return this.related.attributes.status},relatedType(){let e="(not available)";return this.related&&(e=this.related.type),e},relatedName(){let e="(empty)";return this.related&&(e=this.related.attributes.title),e},objectColorClass(){return`has-background-module-${this.object.type}`},relatedColorClass(){return`has-background-module-${this.related.type}`}},data:()=>({oldParams:{},editingParams:{},priority:null,isModified:!1}),watch:{related:{handler:function(e){e&&this.setInternalValues()},deep:!0,immediate:!0}},methods:{setInternalValues(){Object.assign(this.oldParams,this.related.meta.relation.params),Object.assign(this.editingParams,this.related.meta.relation.params),this.priority=this.related.meta.relation.priority},saveParams(){Object.keys(this.editingParams).length?this.related.meta.relation.params=this.editingParams:delete this.related.meta.relation.params,this.related.meta.relation.priority=this.priority,n.a.sendBack("edit-params:save",this.related)},closeParamsView(){n.a.closePanel()},checkParams(){this.isModified=!!Object.keys(this.editingParams).filter(e=>""!==this.editingParams[e]&&this.editingParams[e]!==this.oldParams[e]).length||this.related.meta.relation.priority!==this.priority}}}}}]);