name: 'Run tests'

on:
  pull_request:
    paths:
      - '**/*.php'
  push:
    paths:
      - '**/*.php'

jobs:
  coding-style:
    name: 'Check coding style'
    runs-on: 'ubuntu-18.04'

    steps:
      - name: 'Checkout current revision'
        uses: 'actions/checkout@v2'

      - name: 'Setup PHP'
        uses: 'shivammathur/setup-php@v2'
        with:
          php-version: '7.4'
          tools: 'composer:v1'
          extensions: 'mbstring, intl'
          coverage: 'none'

      - name: 'Discover Composer cache directory'
        id: 'cachedir'
        run: 'echo "::set-output name=path::$(composer global config cache-dir)"'

      - name: 'Share Composer cache across runs'
        uses: 'actions/cache@v2'
        with:
          path: '${{ steps.cachedir.outputs.path }}'
          key: "composer-${{ github.job }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            composer-${{ github.job }}-
            composer-

      - name: 'Install dependencies with Composer'
        run: 'composer install --prefer-dist --no-interaction'

      - name: 'Run PHP CodeSniffer'
        run: |
          vendor/bin/phpcs -n -p --extensions=php \
            --standard=vendor/cakephp/cakephp-codesniffer/CakePHP --ignore=/Migrations/,/Seeds/ \
            ./config ./src ./tests ./config

  static-code-analyzer:
    name: 'Static code analyzer'
    runs-on: 'ubuntu-18.04'
    continue-on-error: true

    steps:
      - name: 'Checkout current revision'
        uses: 'actions/checkout@v2'

      - name: 'Setup PHP'
        uses: 'shivammathur/setup-php@v2'
        with:
          php-version: '7.4'
          tools: 'composer:v1, phpstan'
          extensions: 'mbstring, intl'
          coverage: 'none'

      - name: 'Discover Composer cache directory'
        id: 'cachedir'
        run: 'echo "::set-output name=path::$(composer global config cache-dir)"'

      - name: 'Share Composer cache across runs'
        uses: 'actions/cache@v2'
        with:
          path: '${{ steps.cachedir.outputs.path }}'
          key: "composer-${{ github.job }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            composer-${{ github.job }}-
            composer-

      - name: 'Install dependencies with Composer'
        run: 'composer install --prefer-dist --no-interaction'

      - name: 'Run PHP STAN'
        run: |
          phpstan analyse --no-progress src

  unit:
    name: 'Run unit tests'
    if: "!contains(github.event.commits[0].message, '[skip ci]') && !contains(github.event.commits[0].message, '[ci skip]')"
    runs-on: 'ubuntu-18.04'
    env:
      BEDITA_API_KEY: 12345
      BEDITA_API: http://127.0.0.1:8080
      BEDITA_ADMIN_USR: admin
      BEDITA_ADMIN_PWD: admin
      BEDITA_DOCKER_IMG: bedita/bedita:4.2.1
      COMPOSER_VERSION: 1.10.16

    steps:
      - name: 'Checkout current revision'
        uses: 'actions/checkout@v2'

      - name: 'Downgrade composer, not supporting composer 2 yet'
        run: 'sudo composer self-update ${COMPOSER_VERSION}'

      - name: 'Composer config GH token if available'
        run: 'if [ -n "$GH_TOKEN" ]; then composer config github-oauth.github.com ${GH_TOKEN}; fi'

      - name: 'Docker pull bedita image'
        run: 'docker pull ${BEDITA_DOCKER_IMG}'

      - name: 'Docker inspect bedita image'
        run: 'docker inspect ${BEDITA_DOCKER_IMG}'

      - name: 'Docker run bedita image'
        run: 'docker run --name api -d -p 127.0.0.1:8080:80 --env BEDITA_API_KEY=${BEDITA_API_KEY} --env BEDITA_ADMIN_USR=${BEDITA_ADMIN_USR} --env BEDITA_ADMIN_PWD=${BEDITA_ADMIN_PWD} ${BEDITA_DOCKER_IMG}'

      - name: 'Wait for 10'
        run: 'sleep 10'

      - name: 'Docker ps - show all containers'
        run: 'docker ps -a'

      - name: 'Docker exec on api container: ls -la of webroot and webroot/_files'
        run: 'docker exec api ls -la . webroot webroot/_files'

      - name: 'Setup PHP'
        uses: 'shivammathur/setup-php@v2'
        with:
          php-version: '7.4'
          tools: 'composer:v1'
          extensions: 'mbstring, intl, pdo_mysql.pdo'
          coverage: 'pcov'
          ini-values: 'pcov.directory=., pcov.exclude="~vendor~"'

      - name: 'Discover Composer cache directory'
        id: 'cachedir'
        run: 'echo "::set-output name=path::$(composer global config cache-dir)"'

      - name: 'Share Composer cache across runs'
        uses: 'actions/cache@v2'
        with:
          path: '${{ steps.cachedir.outputs.path }}'
          key: "composer-7.4-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            composer-7.4-
            composer-

      - name: 'Install dependencies with Composer'
        run: 'composer install --prefer-dist --no-interaction'

      - name: 'Setup PCOV clobber'
        run: 'composer require pcov/clobber && vendor/bin/pcov clobber'

      - name: 'Run PHPUnit with coverage'
        run: 'vendor/bin/phpunit --coverage-clover=clover.xml'

      - name: 'Export coverage results'
        uses: 'codecov/codecov-action@v1'
        with:
          file: './clover.xml'
          env_vars: PHP_VERSION,DB_VENDOR

      - name: 'Archive code coverage results'
        uses: 'actions/upload-artifact@v2'
        with:
          name: 'PHP 7.4'
          path: 'clover.xml'
