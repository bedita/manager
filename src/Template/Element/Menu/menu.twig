<main-menu inline-template>
    <div class="menu-bar">

        <nav role="menu">
            {# Core object modules #}
            {% for name, module in modules if name != 'trash' %}
                {% set label = __(name|humanize) %}
                {% set shortLabel = label[0:3] %}
                {% if label|length > 8 %}
                    {% set label = label[0:3] %}
                {% endif %}

                <a href="{{ Url.build({ '_name': 'modules:list', 'object_type': name, 'plugin': null }) }}"
                    title="{{ __('Open module') }} {{ __(name|humanize) }}"
                    class="menu-item {{ name == currentModule.name ? 'current' : '' }}">
                    <span class="menu-item-color-bar has-background-module-{{ name }}" aria-hidden="true"></span>
                    <span class="menu-item-label">{{ label }}</span>
                    <span class="menu-item-short-label">{{ shortLabel }}</span>
                </a>
            {% endfor %}

            {# Plugin modules #}
            {% for k, plugin in config('PluginModules') %}
                {% set label = __(plugin.title|humanize) %}
                {% if label|length > 7 %}
                    {% set label = label[0:3] %}
                {% endif %}

                <a href="{{ Url.build(plugin.route) }}"
                    title="{{ __('Open module') }} {{ __(name|humanize) }}"
                    class="menu-item {{ name == currentModule.name ? 'current' : '' }}">
                    <span class="menu-item-color-bar has-background-module-{{ name }}" aria-hidden="true"></span>
                    <span class="menu-item-label">{{ label }}</span>
                </a>
            {% endfor %}
        </nav>

        <nav role="search">
            <button class="icon icon-search icon-only-icon" v-on:click.prevent="togglePopup('search')"><span class="is-sr-only">search</span></button>
            <div class="popup" v-show="this.popUpAction">
                <input type="text" ref="searchInput" v-model="searchString" v-on:keydown.stop="captureKeys">
                <button :disabled="!searchString" v-on:click="go"><: popUpAction :></button>
            </div>
        </nav>

    </div>
</main-menu>



{#

<ul role="menu" :class="popUpAction? 'popup-on' : ''">

    {% for name, module in modules if name != 'trash' %}
        <li class="has-background-module-{{ name }} {{ name == currentModule.name ? 'current' : '' }}">
            {{ Html.link(
                __(name|humanize)|slice(0, 2),
                { '_name': 'modules:list', 'object_type': name, 'plugin': null },
                { 'tooltip': __(name|humanize), 'class': 'square' })|raw }}
        </li>
    {% endfor %}


    {% for k, plugin in config('PluginModules', []) %}
        <li class="{{ plugin.class.menu }}">
            {{ Html.link(__(plugin.title|humanize)|slice(0, 2),
                plugin.route,
                {'tooltip': __(plugin.title|humanize), 'class': 'square'})|raw }}
        </li>
    {% endfor %}

    <li class="has-background-transparent spacer">&nbsp;</li>


    <li class="has-background-black icon-search center-icon has-tooltip-align-right">
        {{ Html.link(__(''), '', {
            'tooltip': __('Search'),
            'class': 'square',
            'v-on:click.prevent': "togglePopup('search')",
        })|raw }}
    </li>


    <li class="has-background-black icon-tag center-icon has-tooltip-align-right">
        {{ Html.link(__(''), '', {
            'tooltip': __('Direct access by id or unique name'),
            'class': 'square',
            'v-on:click.prevent': "togglePopup('go')",
        })|raw }}
    </li>

    <div class="popup">
        <input type="text" ref="searchInput" v-model="searchString" v-on:keydown.stop="captureKeys">
        <button :disabled="!searchString" v-on:click="go"><: popUpAction :></button>
    </div>

</ul>

 #}
