<children-view inline-template
    relation-name="children"
    config-paginate-sizes={{ config('Pagination.sizeAvailable')|json_encode()|raw }}
    ref="relation"
    @loading="onToggleLoading" @count="onCount">

    <div class="relation-view children-view">
        <div class="related-list-container">

            {# FilterBoxView #}
            <div class="mb-1">
                <filter-box-view
                    :config-paginate-sizes="configPaginateSizes"
                    :pagination.sync="pagination"
                    :show-filter-buttons=false
                    objects-label="{{ __('objects') }}"
                    @filter-update-current-page="onUpdateCurrentPage"
                    @filter-update-page-size="onUpdatePageSize"
                    @filter-objects="onFilterObjects"
                    inline-template>

                        {% element 'FilterBox/filter_box' %}

                </filter-box-view>
            </div>

            {# children objects #}
            <div class="related-objects-list columns"
                droppable
                sortable
                v-bind:class="loading ? 'isLoading' : ''">

                <div
                    class="related-object column is-3 is-one-half-mobile is-one-quarter-desktop is-one-fifth-widescreen is-one-sixth-fullhd is-one-eight-ultra"
                    v-for="(related, index) in objects"
                    :key="related.id"
                    :class="containsId(removedRelated, related.id)? 'removed' : ''"
                    draggable
                    :drag-data="JSON.stringify(related)">

                    {% element 'Form/related_item' { 'children': true } %}

                </div>
            </div>

            {# staged objects to be added #}
            <p class="column is-1 has-text-size-smallest mb-05 mt-05 " v-if="addedRelations.length">{{ __('New children (save to keep)') }}</p>
            <div class="related-new-objects-list mb-2 columns" v-if="addedRelations.length">
                <div
                    class="related-object column is-3 is-one-half-mobile is-one-quarter-desktop is-one-fifth-widescreen is-one-sixth-fullhd is-one-eight-ultra"
                    v-for="related in addedRelations"
                    :key="related.id"
                    v-bind:class="containsId(removedRelated, related.id) ? 'removed' : '' ">

                    {% element 'Form/related_item' { 'stage': true } %}
                </div>
            </div>

            {# hidden field - relations serialized json #}
            {{ Form.control(relationName ~ 'removeRelated', {
                'type': 'hidden',
                'name': 'relations[' ~ relationName ~ '][removeRelated]',
                'v-model': 'removedRelationsData'
            })|raw }}
            {{ Form.unlockField('relations.' ~ relationName ~ '.removeRelated')}}

            {# Relations serialized json form element #}
            {{ Form.control(relationName ~ 'addRelated', {
                'type': 'hidden',
                'name': 'relations[' ~ relationName ~ '][addRelated]',
                'v-model': 'addedRelationsData'
            })|raw }}
            {{ Form.unlockField('relations.' ~ relationName ~ '.addRelated')}}
        </div>


        <div class="mt-1">
            <button v-if="$root.panelIsOpen" class="icon-coffee"
                @click.prevent.stop="closePanel()">{{ __('cancel') }}</button>

            <button v-else
                class="icon-hdd"
                @click.prevent.stop="addRelatedObjects({
                    object: {{object|json_encode}},
                    relationName: relationName,
                    alreadyInView: alreadyInView,
                    relationTypes: relationTypes,
                })">{{ __('add objects') }}</button>

            <button @click.prevent.stop="loadRelatedObjects()">{{ __('reload') }}</button>
        </div>

    </div>
</children-view>
