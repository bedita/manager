<relation-view inline-template
{% if relationName != 'children' %}
    :relation-data='{{ relationSchema|json_encode|raw }}'
{% endif %}
    relation-name={{ relationName }}
    :removed-relations-data={{ removedRelationsData|json_encode }}
    :added-relations-data={{ addedRelationsData|json_encode }}
    config-paginate-sizes={{ config('Pagination.sizeAvailable')|json_encode()|raw }}
    ref="relation"
    @loading="onToggleLoading" @count="onCount">

    <div class="relation-view">

        {# Lookup in properties configuration if a custom element for this relation is set
           in `Properties.{moduleName}.relations._element.{relationName}`.
           Then load custom element or use default relation view #}
        {% set k = 'Properties.' ~ currentModule.name ~ '.relations._element.' ~ relationName %}
        {% set customElement = config(k) %}
        {% if customElement %}
            {% element customElement {
                'relationName': relationName,
                'relationSchema': relationsSchema,
            } %}
        {% else %}

        <div class="related-list-container">

            {# FilterBoxView #}
            <div class="mb-1">
                <filter-box-view
                    :config-paginate-sizes="configPaginateSizes"
                    :pagination.sync="pagination"
                    :show-filter-buttons="false"
                    :relation-types="relationTypes"
                    :init-filter="activeFilter"
                    objects-label="{{ __('objects') }}"
                    @filter-update-current-page="onUpdateCurrentPage"
                    @filter-update-page-size="onUpdatePageSize"
                    @filter-objects="onFilterObjects"
                    inline-template>

                        {% element 'FilterBox/filter_box' %}

                </filter-box-view>
            </div>

            {# RELATED OBJECTS #}
            <div class="mb-1" v-show="objects.length || addedRelations.length">
                <div class="columns" droppable sortable>
                    <div
                        class="related-item-column column is-3 is-one-half-mobile is-one-third-tablet is-one-quarter-desktop is-one-fifth-widescreen is-one-sixth-fullhd"
                        v-for="(related, index) in objects"
                        :key="related.id"
                        :class="containsId(removedRelated, related.id)? 'removed' : ''"
                        draggable
                        :drag-data="JSON.stringify(related)">

                        {% if relationName == 'children' %}
                            {% element 'Form/related_item' { 'children': true } %}
                        {% else %}
                            {% element 'Form/related_item' { 'common': true } %}
                        {% endif %}
                    </div>

                    {# STAGED OBJECTS (new relations) #}
                    <div v-if="addedRelations.length"
                        class="related-item-column column added is-3 is-one-half-mobile is-one-third-tablet is-one-quarter-desktop is-one-fifth-widescreen is-one-sixth-fullhd"
                        v-for="related in addedRelations"
                        :key="related.id">

                        {% element 'Form/related_item' { 'stage': true } %}
                    </div>
                </div>
            </div>

        </div>

        <div class="mt-5">
            {# DROP FILES #}
            {% set types = ['media', 'images', 'videos', 'audio', 'files'] %}
            {% set acceptedTypes = types | filter((item) => item in relationSchema.right) | join(', ') %}
            {% if acceptedTypes|length %}
                {# :accepted-drop="[`.from-relation-${relationName}`,isRelationWithMedia && 'from-files']"> #}

                <drop-upload
                    placeholder="{{ __('Click or drop new files here') }}"
                    @new-relations="appendRelations"
                    ></drop-upload>
            {% endif %}

            <div>
                <button v-if="isPanelOpen({{object.id|json_encode}})" class="icon-coffee"
                    @click.prevent.stop="closePanel()">{{ __('cancel') }}</button>

                <button v-else
                    class="icon-hdd"
                    @click.prevent.stop="addRelatedObjects({
                        object: {{object|json_encode}},
                        relationName: relationName,
                        alreadyInView: alreadyInView,
                        relationTypes: relationTypes,
                    })">{{ __('add objects') }}</button>
            </div>
        </div>

        {# End relation custom or default view #}
        {% endif %}

        {# hidden field - relations serialized json #}
        {{ Form.control(relationName ~ 'removeRelated', {
            'type': 'hidden',
            'name': 'relations[' ~ relationName ~ '][removeRelated]',
            'v-model': 'removedRelationsData'
        })|raw }}
        {{ Form.unlockField('relations.' ~ relationName ~ '.removeRelated')}}

        {# Relations serialized json form element #}
        {{ Form.control(relationName ~ 'addRelated', {
            'type': 'hidden',
            'name': 'relations[' ~ relationName ~ '][addRelated]',
            'v-model': 'addedRelationsData'
        })|raw }}
        {{ Form.unlockField('relations.' ~ relationName ~ '.addRelated')}}

    </div>
</relation-view>
