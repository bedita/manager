<relation-view inline-template
    relation-name={{ relationName }}
    :relation-data='{{ relationSchema|json_encode|raw }}'

    config-paginate-sizes={{ config('Pagination.sizeAvailable')|json_encode()|raw }}
    ref="relation"

    @loading="onToggleLoading"
    @count="onCount">

    <div class="relation-view">
        <div class="related-list-container">

            {# FilterBoxView #}
            <div class="mb-1">
                <filter-box-view
                    :config-paginate-sizes="configPaginateSizes"
                    :pagination.sync="pagination"
                    :show-filter-buttons="false"
                    :relation-types="relationTypes"
                    :init-filter="activeFilter"

                    objects-label="{{ __('objects') }}"

                    @filter-update-current-page="onUpdateCurrentPage"
                    @filter-update-page-size="onUpdatePageSize"
                    @filter-objects="onFilterObjects"
                    inline-template>

                        {% element 'FilterBox/filter_box' %}

                </filter-box-view>
            </div>

            {# related objects #}
            <div class="related-objects-list columns"
                :class="loading? 'isLoading' : ''"
                droppable
                sortable
                :accepted-drop="[`.from-relation-${relationName}`,isRelationWithMedia && 'from-files']">

                {# related object #}
                {% element 'Form/related_item' %}

                {# empty element: keep for flex layout #}
                <div class="column"></div>
            </div>


            {# staged objects to be added #}
            <p class="column is-1 has-text-size-smallest" v-if="addedRelations.length">{{ __('New relations (save to keep)') }}</p>
            <div class="related-objects-list staged-objects columns" v-if="addedRelations.length">
                <div class="related-object column"
                    v-for="related in addedRelations"
                    :key="related.id"
                    :class="containsId(removedRelated, related.id) ? 'removed' : '' ">
                    <article class="box has-background-gray-700 has-text-gray-100 has-text-size-smaller"
                            v-bind:class="related.type">

                        <header>
                            <h1><: related.attributes.title || related.attributes.name :></h1>
                            <span class="has-text-size-smaller prop-id"><: related.id :></span>
                        </header>

                        <div class="thumbnail" v-if="related.meta && related.meta.thumb_url" >
                            <figure>
                                <img :src="related.meta.thumb_url" />
                            </figure>
                        </div>

                        <div>
                            <span class="tag" v-bind:class="'has-background-module-' + related.type"><: related.type :></span>
                            <span class="tag" v-if="related.attributes.status"><: related.attributes.status :></span>
                        </div>

                        <footer>
                            <a @click.prevent="removeAddedRelations(related.id)">{{ __('click to remove') }}</a>
                        </footer>
                    </article>
                </div>

                {# empty element: keep for flex layout #}
                <div class="column"></div>
                <div class="column"></div>
                <div class="column"></div>
                <div class="column"></div>
                <div class="column"></div>
            </div>

            {# hidden field - relations serialized json #}
            {{ Form.control(relationName ~ 'removeRelated', {
                'type': 'hidden',
                'name': 'relations[' ~ relationName ~ '][removeRelated]',
                'v-model': 'removedRelationsData'
            })|raw }}
            {{ Form.unlockField('relations.' ~ relationName ~ '.removeRelated')}}

            {# Relations serialized json form element #}
            {{ Form.control(relationName ~ 'addRelated', {
                'type': 'hidden',
                'name': 'relations[' ~ relationName ~ '][addRelated]',
                'v-model': 'addedRelationsData'
            })|raw }}
            {{ Form.unlockField('relations.' ~ relationName ~ '.addRelated')}}
        </div>

        <div class="mt-1">
            <button v-if="isPanelOpen({{object.id|json_encode}})" class="icon-coffee"
                @click.prevent.stop="closePanel()">{{ __('cancel') }}</button>
            <button v-else
                class="icon-hdd"
                :disabled="isPanelOpen()"
                @click.prevent.stop="addRelatedObjects({
                    object: {{object|json_encode}},
                    relationName: relationName,
                    alreadyInView: alreadyInView,
                    relationTypes: relationTypes,
                })">{{ __('add objects') }}</button>

            <button @click.prevent.stop="reloadObjects()">{{ __('reload') }}</button>
        </div>

    </div>
</relation-view>
