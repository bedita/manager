<relation-view inline-template relation-name={{ relationName }}
    :load-on-start="true" @loading="onToggleLoading">

    <div class="relation-view">

        <div class="related-list">
            <div v-if="!hasElementsToShow()">
                <p>{{ __('Empty')}}</p>
            </div>

            <div class="list-header" v-if="hasElementsToShow()">
                <span class="title">{{ __('title') }}</span>
                <span class="id">{{ __('id') }}</span>
                <span class="uname">{{ __('uname') }}</span>
                <span class="status">{{ __('status') }}</span>
            </div>

            {# staged objects to be added #}
            <div class="added-objects-list">
                <div style="opacity: 0.7" class="added-related-object" v-for="related in addedRelations">
                    <span class="title"><: related.attributes.title || related.attributes.name :></span>
                    <span class="id"><: related.id :></span>
                    <span class="uname"><: related.attributes.uname :></span>
                    <span class="status"><: related.attributes.status :></span>
                    <a class="open" :href="buildViewUrl(related.type, related.id)" target="_blank">Open</a>
                    <button class="remove" @click.prevent="removeAddedRelations(related.id)">x</button>
                </div>
            </div>

            {# related objects #}
            <div class="related-objects-list">
                <staggered-list stagger="15">
                    <div class="related-object"
                        v-for="(related, index) in objects"
                        :data-index="index"
                        :key="related.id"
                        :class="containsId(removedRelated, related.id) ? 'deleted' : '' ">

                        {# <span class="priority"><: related.meta.relation.priority :></span> #}
                        <span class="title"><: related.attributes.title || related.attributes.name :></span>
                        <span class="id"><: related.id :></span>
                        <span class="uname"><: related.attributes.uname :></span>
                        <span class="status"><: related.attributes.status :></span>
                        <a class="open" :href="buildViewUrl(related.type, related.id)" target="_blank">Open</a>
                        <button v-show="containsId(removedRelated, related.id)" class="add" @click.prevent="reAddRelations(related)">+</button>
                        <button v-show="!containsId(removedRelated, related.id)" class="remove" @click.prevent="removeRelations(related)">&times;</button>
                    </div>
                </staggered-list>
            </div>

            <div v-if="hasElementsToShow()">
                <div class="list-actions">
                    <select class="page-size-selector" v-model="step">
                        <option v-for="size in pageSizeOptions"><: size :></option>
                    </select>
                    <button @click.prevent="firstPage()">{{ __('first') }}</button>
                    <button @click.prevent="prevPage()">{{ __('prev') }}</button>
                    <button @click.prevent="nextPage()">{{ __('next') }}</button>
                    <button @click.prevent="lastPage()">{{ __('last') }}</button>
                </div>

                <div class="list-actions">
                    <span><: pagination.page :> / <: pagination.page_count :></span>
                    <span>{{ __('Items') }}: <: pagination.page_items :></span>
                </div>
            </div>

            <div class="remove-relations">
                {# Relations serialized json form element #}
                {{ Form.control(relationName ~ 'removeRelated', {
                    'type': 'hidden',
                    'name': 'relations[' ~ relationName ~ '][removeRelated]',
                    'v-model': 'relationsData'
                })|raw }}
                {{ Form.unlockField('relations.' ~ relationName ~ '.removeRelated')}}
            </div>
        </div>

        <div class="list-actions">
            <button @click.prevent="loadRelatedObjects()">{{ __('Reload') }}</button>
            <button @click.prevent="showRelationshipsModal()">{{ __('Add') }}</button>
        </div>

        {# component used to add new relations #}
        {% element 'Form/relation_add' {'relationName': relationName} %}

    </div>
</relation-view>
