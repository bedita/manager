{% do _view.assign('title', 'Model ' ~ resourceType|humanize) %}
{% do _view.assign('bodyViewClass', 'view-module view-model') %}

<modules-view inline-template ref="moduleView">
<div class="modules-view">

    {% if resource.id %}
    <header>
        <h1 untitled-label="{{ __('Untitled') }}">{{ resource.attributes.name }}</h1>
    </header>
    {% endif %}

    <div class="module-form">

        {{ Form.create({'defaults': resource.attributes, 'schema': {}}, {
            'url': {'_name': 'model:save:object_types'},
            'id': 'form-main',
            'check-changes': 'true',
        })|raw }}

            {{ Form.hidden('id', {'value': (object) ? object.id : resource.id})|raw }}
            {{ Form.hidden('_actualAttributes', {'value': currentAttributes})|raw }}
            {# Handle `hidden` and `translation_rules` via hidden input for now #}
            {{ Form.hidden('hidden', {
                id: 'hidden',
                value: resource.attributes.hidden|default([])|json_encode,
            })|raw }}
            {% do Form.unlockField('hidden') %}
            {# TODO: handle translation rules in properties directly, like `hidden` #}
            {# {{ Form.hidden('translation_rules', {
                id: 'translation_rules',
                value: resource.attributes.translation_rules|default({})|json_encode,
            })|raw }}
            {% do Form.unlockField('translation_rules') %} #}

            {# Handle newly created custom props via `addedProperties` hidden input for now #}
            {{ Form.hidden('addedProperties', {
                id: 'addedProperties',
                value: []|json_encode,
            })|raw }}
            {% do Form.unlockField('addedProperties') %}

                <property-view inline-template :tab-open="tabsOpen" :is-default-open=true tab-name="general">
                    <section class="fieldset">
                        <header @click.prevent="toggleVisibility()"
                            class="tab unselectable"
                            :class="isOpen? 'open has-border-module-{{ currentModule.name }}' : ''">
                            <h2>{{ __('General') }}</h2>
                        </header>
                        <div v-show="isOpen" class="tab-container">
                            {% for key, value in properties.core %}
                                {% if key == 'associations' %}
                                    {{ Form.control(key, {
                                        'id': key,
                                        'value': value,
                                        'type': 'select',
                                        'multiple': 'checkbox',
                                        'options': associationsOptions
                                    })|raw }}
                                {% else %}

                                    {% set options = Schema.controlOptions(key, value, schema.properties[key]) %}
                                    {% if resource.meta.core_type %}
                                        {% if key in ['name', 'singular', 'table', 'is_abstract', 'parent_name'] %}
                                            {% set options = options|merge({
                                                'readonly' : true,
                                            }) %}
                                        {% endif %}
                                    {% endif %}

                                    {{ Property.control(key, value, options)|raw }}

                                    {% if key == 'parent_name' %}
                                        <a href="{{ Url.build({'_name': 'model:view:object_types', 'id': value}) }}" class="link-to-parent">â€º {{ __('view parent') }}</a>
                                    {% endif %}
                                {% endif %}
                            {% endfor %}
                        </div>
                    </section>
                </property-view>

        {# Set `_jsonKeys` hidden input from config #}
        {{ Form.control('_jsonKeys', {'type': 'hidden', 'value': config('_jsonKeys', [])|merge(['hidden'])|join(',')})|raw }}

        {{ Form.end()|raw }}

        {% do _view.append('app-module-buttons', Form.button( __('Save'),
            {
                'form': 'form-main',
                'class': 'icon-check-1 button button-primary button-primary-hover-module-' ~ currentModule.name ~ ' is-width-auto',
            }
        )) %}
        {% if not resource.meta.core_type %}
            {% do _view.append('app-module-buttons', Form.postButton(__('Remove'),
                {
                    '_name': 'model:remove:object_types',
                    'id': resource.id,
                    'class': 'icon-cancel button button-outlined button-outlined-hover-module-model is-width-auto'
                }
            )) %}
        {% endif %}
    </div>

    <property-view inline-template :tab-open="tabsOpen" :is-default-open=true tab-name="relations">
        <section class="fieldset">
            <header @click.prevent="toggleVisibility()"
                class="tab unselectable"
                :class="isOpen? 'open has-border-module-{{ currentModule.name }}' : ''">
                <h2>{{ __('Relations') }}</h2>
            </header>
            <div v-show="isOpen" class="relations-container">
                {% if resource.meta.relations %}
                    <div class="relations-group">
                    {% for relation in resource.meta.relations %}
                        <a class="tag is-black" href="{{ Url.build({'_name': 'model:view:relations', 'id': relation}) }}">{{ relation }}</a>
                    {% endfor %}
                    </ul>
                {% else %}
                    <p>No Relations</p>
                {% endif %}
            </div>
        </section>
    </property-view>

    <property-view inline-template :tab-open="tabsOpen" :is-default-open=true tab-name="core-props">
        <section class="fieldset">
            <header @click.prevent="toggleVisibility()"
                class="tab unselectable"
                :class="isOpen? 'open has-border-module-{{ currentModule.name }}' : ''">
                <h2>{{ __('Core properties') }}</h2>
            </header>
            <div v-show="isOpen">
                <object-properties
                    :init-properties="{{ objectTypeProperties.core|json_encode }}"
                    type="core"
                    :hidden="{{ resource.attributes.hidden|default([])|json_encode }}"
                >
                </object-properties>
            </div>
        </section>
    </property-view>

    <property-view inline-template :tab-open="tabsOpen" :is-default-open=true tab-name="inherited-props">
        <section class="fieldset">
            <header @click.prevent="toggleVisibility()"
                class="tab unselectable"
                :class="isOpen? 'open has-border-module-{{ currentModule.name }}' : ''">
                <h2>{{ __('Inherited properties') }}</h2>
            </header>
            <div v-show="isOpen">
                <object-properties
                    :init-properties="{{ objectTypeProperties.inherited|json_encode }}"
                    type="inherited"
                    :hidden="{{ resource.attributes.hidden|default([])|json_encode }}"
                >
                </object-properties>
            </div>
        </section>
    </property-view>

    <property-view inline-template :tab-open="tabsOpen" :is-default-open=true tab-name="custom-props">
        <section class="fieldset">
            <header @click.prevent="toggleVisibility()"
                class="tab unselectable"
                :class="isOpen? 'open has-border-module-{{ currentModule.name }}' : ''">
                <h2>{{ __('Custom properties') }}</h2>
            </header>
            <div v-show="isOpen">
                <object-properties
                    :init-properties="{{ objectTypeProperties.custom|json_encode }}"
                    type="custom"
                    :hidden="{{ resource.attributes.hidden|default([])|json_encode }}"
                >
                </object-properties>
                <object-property-add
                    type="custom"
                    :prop-types="{{ propertyTypesOptions.options|default([])|json_encode }}">
                </object-property-add>
            </div>
        </section>
    </property-view>

    {{ element('Model/sidebar_links') }}

</div>
</modules-view>
