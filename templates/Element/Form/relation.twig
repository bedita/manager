<relation-view inline-template
    :relation-data="{{ relationSchema|json_encode|escape('html_attr') }}"
    :data-list="dataList"
    :readonly={{ readonly ? 'true' : 'false' }}
    relation-name="{{ relationName }}"
    relation-label="{{ Layout.tr(relationName) }}"
    :pre-count="{{ preCount }}"
    config-paginate-sizes="{{ config('Pagination.sizeAvailable')|json_encode|escape('html_attr') }}"
    ref="relation"
    @loading="onToggleLoading"
    @count="onCount"
>
    <div class="relation-view">
        {# Lookup in properties configuration if a custom element for this relation is set
        in `Properties.{moduleName}.relations._element.{relationName}`.
        Then load custom element or use default relation view #}
        {% set customElement = Element.custom(relationName) %}
        {% if customElement %}
            {{ element(customElement, {
                'relationName': relationName,
                'relationLabel': Layout.tr(relationName),
                'relationSchema': relationsSchema,
            }) }}
        {% else %}

        <div class="related-list-container">
            {# FilterBoxView #}
            <div class="mb-1" v-show="showFilter">
                {% set fbt = filtersByType ? filtersByType : [] %}
                {% set list = Schema.filterListByType(fbt, schemasByType) %}
                <filter-box-view
                    :config-paginate-sizes="configPaginateSizes"
                    :pagination.sync="pagination"
                    :show-advanced="false"
                    :relation-types="relationTypes"
                    :init-filter="activeFilter"
                    {% if list %}
                    :filters-by-type="{{ list|json_encode|escape('html_attr') }}"
                    {% endif %}
                    objects-label="{{ __('objects') }}"
                    @filter-update-current-page="onUpdateCurrentPage"
                    @filter-update-page-size="onUpdatePageSize"
                    @filter-objects="onFilterObjects"
                    @filter-reset="reloadObjects"
                    inline-template
                >
                    {{ element('FilterBox/filter_box') }}
                </filter-box-view>
            </div>

            {% if relationName == 'children' %}
                {% if 'children_order' in mainObject.attributes|keys %}
                    <div class="related-objects ml-1 mb-1">
                        <div class="columns">
                            {{ Property.control(
                                'children_order',
                                mainObject.attributes.children_order|default('position'),
                                {
                                    'label': __('Children order'),
                                    'class': 'icon-info-1',
                                    'id': 'children-order',
                                    'v-title': '`' ~ __('Save object to apply order change') ~ '`',
                                }
                            )|raw }}
                        </div>
                    </div>
                {% else %}
                    {{ Form.hidden('children_order', {'id': 'children-order'})|raw }}
                {% endif %}
            {% else %}
                {% if System.isBEditaApiVersionGte('5.31.0') and Perms.canSave() and not readonly %}
                <sort-related
                    :object-id="{{ mainObject.id|json_encode }}"
                    :object-type="{{ mainObject.type|json_encode }}"
                    :relation-name="{{ relationName|json_encode }}"
                    :default-field="{{ config('RelationsSortFields.' ~ relationName ~ '_default')|default('title')|json_encode }}"
                    :sort-fields="{{ config('RelationsSortFields.' ~ relationName)|default([{'label':__('Title'),'value':'title'}])|json_encode }}"
                    @reload-related="reloadObjects"
                    v-if="objects?.length > 1"
                >
                </sort-related>
                {% endif %}
            {% endif %}

            {% set dragAndDrop = relationName != 'children' or (relationName == 'children' and mainObject.attributes.children_order in [null, 'position', '-position']) %}
            {# RELATED OBJECTS #}
            <div class="ml-05 mb-1" v-if="loading">{{ __('Loading ...') }}</div>
            <div class="ml-05 mb-1" v-if="!loading && objects.length === 0" v-if="addedRelations.length == 0">{{ __('No items found') }}</div>
            <div class="related-objects mb-1" v-show="objects.length || addedRelations.length">
                <div :data-list="dataList" class="columns" {%- if dragAndDrop %}droppable sortable{%- endif %}>
                    <div
                        class="related-item-column column is-3 is-one-half-mobile is-one-third-tablet is-one-quarter-desktop is-one-fifth-widescreen is-one-sixth-fullhd"
                        v-for="(related, index) in objects"
                        :key="related.id"
                        :class="containsId(removedRelated, related.id)? 'removed' : ''"
                        {%- if dragAndDrop %}
                        draggable
                        :drag-data="JSON.stringify(related)"
                        {%- endif %}
                        >
                            {% if relationName == 'children' %}
                                {{ element('Form/related_item', { 'children': true, 'foldersSchema': relationsSchema[relationName] }) }}
                            {% else %}
                                {{ element('Form/related_item', { 'common': true, 'readonly': readonly }) }}
                            {% endif %}
                    </div>

                    {% if not readonly %}
                    {# STAGED OBJECTS (new relations) #}
                    <div v-if="addedRelations.length"
                        class="related-item-column column added is-3 is-one-half-mobile is-one-third-tablet is-one-quarter-desktop is-one-fifth-widescreen is-one-sixth-fullhd"
                        v-for="related in addedRelations"
                        :key="related.id">

                        {{ element('Form/related_item', { 'stage': true }) }}
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>

        {% if Perms.canSave() and not readonly %}
        <div v-if="changedOriginalData">
            <p class="is-expanded tag mt-1">
                <app-icon icon="carbon:filter"></app-icon>
                <span class="ml-05">{{ __('Form data has been modified. Save it to persist the changes') }}</span>
            </p>
        </div>
        <div class="mt-5">
            {% if uploadableNum %}
                {{ element(Element.dropupload(relationsSchema[relationName]['right']), {
                    'objectTypes': relationsSchema[relationName]['right']
                }) }}
            {% endif %}
            <div>
                <button v-if="isPanelOpen({{object.id|json_encode}})" @click.prevent.stop="closePanel()">
                    <app-icon icon="carbon:close"></app-icon>
                    <span class="ml-05">{{ __('cancel') }}</span>
                </button>

                <template v-else>
                    {% if object.id %}
                    <button
                        class="button button-primary button-primary-hover-module-{{ currentModule.name }} is-width-auto"
                        :class="{'is-loading-spinner': resettingRelated}"
                        :disabled="!changedOriginalData"
                        @click.prevent.stop="resetObjects"
                        v-if="relationName != 'children'"
                    >
                        <app-icon icon="carbon:filter-reset"></app-icon>
                        <span class="ml-05">{{ __('Reset') }}</span>
                    </button>
                    <button
                        class="button button-primary button-primary-hover-module-{{ currentModule.name }} is-width-auto"
                        :class="{'is-loading-spinner': savingRelated}"
                        :disabled="!changedOriginalData"
                        @click.prevent.stop="saveRelated({
                            object: {{object|json_encode}},
                            relationName: relationName,
                            relationLabel: relationLabel,
                            alreadyInView: alreadyInView,
                            relationTypes: relationTypes,
                        })"
                        v-if="relationName != 'children'"
                    >
                        <app-icon icon="carbon:save"></app-icon>
                        <span class="ml-05">{{ __('Save') }}</span>
                    </button>
                    {% endif %}

                    <button
                        class="button button-primary button-primary-hover-module-{{ currentModule.name }} is-width-auto"
                        @click.prevent.stop="addRelatedObjects({
                            object: {{object|json_encode}},
                            relationName: relationName,
                            relationLabel: relationLabel,
                            alreadyInView: alreadyInView,
                            relationTypes: relationTypes,
                        })">
                        <app-icon icon="carbon:add"></app-icon>
                        <span class="ml-05">{{ __('add objects') }}</span>
                    </button>
                </template>
            </div>
        </div>
        {% endif %} {# Perms #}

        {# End relation custom or default view #}
        {% endif %}

        <div class="mt-2" v-show="objects.length">
            {% set urlOptions = {'_name': 'export:related', 'object_type': object.type, 'id': object.id, 'relation': relationName} %}
            {% set filteredOptions = {'_name': 'export:related:filtered', 'object_type': object.type, 'id': object.id, 'relation': relationName, 'query': ''} %}
            {% set formats = config('Export.formats', {
                'CSV': 'csv',
                'Open Document': 'ods',
                'MS Excel': 'xlsx'
            }) %}

            <select v-model="exportFormat">
            {% for label,format in formats %}
                <option value="{{ format }}" {% if format == defaultFormat %}selected="selected"{% endif %}>{{ label }}</option>
            {% endfor %}
            </select>

            {% for label, format in formats %}
                <template v-if="exportFormat === '{{ format }}'">
                    <a
                        class="button button-outlined"
                        target="_blank"
                        href="{{ Url.build(urlOptions|merge({'format': format})) }}"
                    >
                        <app-icon icon="carbon:export"></app-icon>
                        <span class="ml-05">{{ __('Export') }}</span>
                    </a>
                    <a
                        v-if="Object.keys(activeFilter).length > 0"
                        class="button button-outlined"
                        target="_blank"
                        :href="exportFilteredUrl('{{ Url.build(filteredOptions|merge({'format': format})) }}')"
                    >
                        <app-icon icon="carbon:export"></app-icon>
                        <span class="ml-05">{{ __('Export Filtered') }}</span>
                    </a>
                </template>
            {% endfor %}
        </div>

        {% if not readonly %}
        {# hidden field - relations serialized json #}
        {{ Form.control(relationName ~ 'removeRelated', {
            'type': 'hidden',
            'name': 'relations[' ~ relationName ~ '][removeRelated]',
            'v-model': 'removedRelationsData'
        })|raw }}
        {% do Form.unlockField('relations.' ~ relationName ~ '.removeRelated') %}

        {# Relations serialized json form element #}
        {{ Form.control(relationName ~ 'addRelated', {
            'type': 'hidden',
            'name': 'relations[' ~ relationName ~ '][addRelated]',
            'v-model': 'addedRelationsData'
        })|raw }}
        {% do Form.unlockField('relations.' ~ relationName ~ '.addRelated') %}
        {% endif %}

    </div>
</relation-view>
